{"version":3,"sources":["plugins/client.js"],"names":[],"mappings":"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","file":"plugins/client.js","sourcesContent":["var _ = require('lodash');\n\nimport {COMMAND, INTENT, parseMessage, serializeArguments, deserializeArguments, BUILTIN_COMMANDS} from \"./client-server-base\";\n\nexport default function client(options) {\n  let clientPlugin = new ClientPlugin(options);\n  return function(...args) {\n    return clientPlugin.applyPlugin.apply(clientPlugin, args);\n  }\n}\n\nclass ClientPlugin {\n  constructor({communication, intents = {}, commands = {}}) {\n    _.extend(this, {\n      communication, intents, commands,\n      _nextIntentId: 1\n    });\n    _.extend(this.commands, BUILTIN_COMMANDS);\n\n    this.communication.onReceive((msg) => this.receive(msg));\n  }\n\n  // Send a message over the provided 'communication' object.\n  send(message) {\n    let msgString = JSON.stringify(message);\n    this.communication.send(msgString);\n  }\n\n  // Called whenever a message is receive on the 'communication' object, will execute\n  // commands receive from the server in response.\n  receive(msgString) {\n    parseMessage(msgString, (message) => {\n      let [messageType] = message;\n      switch(messageType) {\n        case COMMAND:\n          return this.applyCommand(message);\n        case INTENT:\n          throw new Error(\"Intents should not be sent to clients.\")\n      }\n    });\n  }\n\n  // This method is called (indirectly) by u.plugin(client).\n  applyPlugin(u) {\n    this.u = u;\n\n    this.addNodeMethods();\n\n    return {\n      methods: {\n        addIntent: this.addIntent.bind(this),\n        addCommand: this.addCommand.bind(this)\n      }\n    };\n  }\n\n  // Generates a map of methods that will send named intents when called.\n  addNodeMethods() {\n    _.each(this.intents, (i, name) => { this.addIntent(name, i); });\n    _.each(this.commands, (c, name) => { this.addCommand(name, c); });\n  }\n\n  // Adds a new intent, including a method on nodes.\n  addIntent(intentName, _) {\n    this.u.registerNodeProperties({\n      [intentName]: this.makeIntentMethod(intentName)\n    });\n  }\n\n  // Adds a new command, including a method on nodes.\n  addCommand(commandName, commandCode) {\n    this.u.registerNodeProperties({\n      [commandName]: commandCode\n    });\n  }\n\n  // Generates a method that will send a named intent with the right parameters when called.\n  makeIntentMethod(intentName) {\n    let client = this;\n    return function(...args) {\n      // this here will be the node we're called upon\n      let intent = [INTENT, intentName, this.path(), serializeArguments(args), client._nextIntentId++];\n      client.send(intent);\n    }\n  }\n\n  // Applies a command received from the server to the local state.\n  applyCommand([code, commandName, objectPath, args]) {\n    // find the right one\n    let command = this.commands[commandName];\n    if (!command)\n      throw new Error(`Received unknown command: '${commandName}'.`);\n\n    let u = this.u;\n    let target = u(objectPath);\n    args = deserializeArguments(u, args);\n\n    return command.apply(target, args);\n  }\n}\n\n/*\n intent:\n function moveMagnet(clientId, umagnet, newPosition) {\n umagnet.moveTo(newPosition);\n }\n\n command:\n function moveTo(umagnet, newPosition) {\n umagnet.update({x: newPosition.x, y: newPosition.y});\n }\n\n tryMovingMagnet(clientId, newPosition) {\n  this.command.moveTo(newPosition);\n }\n moveMagnetTo(newPosition) {\n  this.update({x: newPosition.x, y: newPosition.y})\n }\n\nmagnet.intent.move({x: 12, y: 44});\n */\n\n\n/*\n\n COMMUNICATION LOGIC:\n client - intent method:   send [object, intent, parameters] to the server\n client - command method:  < not present >\n client - apply intent:    < not present >\n client - apply command:   execute the code\n\n server - intent method:   virtual send [object, intent, parameters] to yourself\n server - apply intent:    execute the code, calling one or more command method or rejecting the intent\n server - command method:  execute the code, send [object, command, parameters] to all clients\n server - apply command:   < not present >\n\n intent code - runs on the server, translates intent into commands\n command code - runs on both, applies changes to state\n */\n"],"sourceRoot":"../../../lib"}