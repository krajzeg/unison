{"version":3,"sources":["plugins/client.js"],"names":[],"mappings":"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","file":"plugins/client.js","sourcesContent":["let _ = require('lodash');\nlet Promise = require('bluebird');\n\nimport {COMMAND, INTENT, RESPONSE, RESPONSE_OK, RESPONSE_ERROR, parseMessage, serializeArguments, deserializeArguments, deserialize, BUILTIN_COMMANDS} from \"./client-server-base\";\n\nexport default function client(options) {\n  let clientPlugin = new ClientPlugin(options);\n  return function(...args) {\n    return clientPlugin.applyPlugin.apply(clientPlugin, args);\n  }\n}\n\nclass ClientPlugin {\n  constructor({communication, intents = {}, commands = {}}) {\n    _.extend(this, {\n      communication, intents, commands,\n\n      _nextIntentId: 1,\n      _pendingIntents: {}\n    });\n    _.extend(this.commands, BUILTIN_COMMANDS);\n\n    this.communication.onReceive((msg) => this.receive(msg));\n  }\n\n  // Send a message over the provided 'communication' object.\n  send(message) {\n    let msgString = JSON.stringify(message);\n    this.communication.send(msgString);\n  }\n\n  // Called whenever a message is receive on the 'communication' object, will execute\n  // commands receive from the server in response.\n  receive(msgString) {\n    parseMessage(msgString, (message) => {\n      let [messageType] = message;\n      switch(messageType) {\n        case COMMAND:\n          return this.applyCommand(message);\n        case INTENT:\n          throw new Error(\"Intents should not be sent to clients.\")\n        case RESPONSE:\n          return this.applyIntentResponse(message);\n      }\n    });\n  }\n\n  // This method is called (indirectly) by u.plugin(client).\n  applyPlugin(u) {\n    this.u = u;\n\n    this.addNodeMethods();\n\n    return {\n      methods: {\n        addIntent: this.addIntent.bind(this),\n        addCommand: this.addCommand.bind(this)\n      }\n    };\n  }\n\n  // Generates a map of methods that will send named intents when called.\n  addNodeMethods() {\n    _.each(this.intents, (i, name) => { this.addIntent(name, i); });\n    _.each(this.commands, (c, name) => { this.addCommand(name, c); });\n  }\n\n  // Adds a new intent, including a method on nodes.\n  addIntent(intentName, _) {\n    this.u.registerNodeProperties({\n      [intentName]: this.makeIntentMethod(intentName)\n    });\n  }\n\n  // Adds a new command, including a method on nodes.\n  addCommand(commandName, commandCode) {\n    this.u.registerNodeProperties({\n      [commandName]: commandCode\n    });\n  }\n\n  // Generates a method that will send a named intent with the right parameters when called.\n  makeIntentMethod(intentName) {\n    let client = this;\n    return function(...args) {\n      // this here will be the node we're called upon\n      let intentId = client._nextIntentId++;\n      let intent = [INTENT, intentName, this.path(), serializeArguments(args), intentId];\n      client.send(intent);\n\n      return new Promise((resolve, reject) => {\n        client._pendingIntents[intentId] = {name: intentName, target: this, resolve: resolve, reject: reject};\n      });\n    }\n  }\n\n  // Applies a response to an intent sent earlier.\n  applyIntentResponse([code, status, intentId, resultOrMessage]) {\n    let intent = this._pendingIntents[intentId];\n    if (!intent)\n      throw new Error(`Received response to an unknown or expired intent: ${intentId}.`);\n\n    if (status == RESPONSE_OK) {\n      intent.resolve(deserialize(this.u, resultOrMessage));\n    } else if (status == RESPONSE_ERROR) {\n      intent.reject({intent: intent.name, target: intent.target, message: resultOrMessage});\n      intent.target.trigger('error', {intent: intent.name, message: resultOrMessage});\n    } else {\n      throw new Error(`Unrecognized intent response status: ${status}.`);\n    }\n\n    delete this._pendingIntents[intentId];\n  }\n\n  // Applies a command received from the server to the local state.\n  applyCommand([code, commandName, objectPath, args]) {\n    // find the right one\n    let command = this.commands[commandName];\n    if (!command)\n      throw new Error(`Received unknown command: '${commandName}'.`);\n\n    let u = this.u;\n    let target = u(objectPath);\n    args = deserializeArguments(u, args);\n\n    return command.apply(target, args);\n  }\n}\n\n"],"sourceRoot":"../../../lib"}