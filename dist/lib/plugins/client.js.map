{"version":3,"sources":["plugins/client.js"],"names":[],"mappings":"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","file":"plugins/client.js","sourcesContent":["let _ = require('lodash');\nlet Promise = require('bluebird');\n\nlet cs = require(\"./client-server-base\");\nimport { functionized } from '../util';\n\nexport default function client(options) {\n  return functionized(ClientPlugin, [options], 'applyPlugin');\n}\n\nfunction ClientPlugin({communication, intents = {}, commands = {}}) {\n  _.extend(this, {\n    communication, intents, commands,\n\n    _nextIntentId: 1,\n    _pendingIntents: {}\n  });\n\n  this.communication.onReceive((msg) => this.receive(msg));\n}\nClientPlugin.prototype = {\n  // Send a message over the provided 'communication' object.\n  send(message) {\n    let msgString = JSON.stringify(message);\n    this.communication.send(msgString);\n  },\n\n  // Called whenever a message is receive on the 'communication' object, will execute\n  // commands receive from the server in response.\n  receive(msgString) {\n    cs.parseMessage(msgString, (message) => {\n      let [messageType] = message;\n      switch(messageType) {\n        case cs.COMMAND:\n          return this.applyCommand(message);\n        case cs.INTENT:\n          throw new Error(\"Intents should not be sent to clients.\")\n        case cs.RESPONSE:\n          return this.applyIntentResponse(message);\n      }\n    });\n  },\n\n  // This method is called (indirectly) by u.plugin(client).\n  applyPlugin(u) {\n    this.u = u;\n\n    u.define({commands: cs.BUILTIN_COMMANDS}); // add the _seed command by default\n    u.define({commands: this.commands, intents: this.intents});\n\n    return {\n      name: 'client',\n\n      onDefine: this.processDefinitions.bind(this),\n\n      methods: {\n        addIntent: this.addIntent.bind(this),\n        addCommand: this.addCommand.bind(this),\n        clientSide: true\n      }\n    };\n  },\n\n  // Generates a map of methods that will send named intents when called.\n  processDefinitions(typeName, definitions, prototype) {\n    let intentMethods = _.mapValues(definitions.intents || {}, (intentCode, name) =>\n      this.makeIntentMethod(name)\n    );\n    let commandMethods = _.mapValues(definitions.commands || {}, (cmdCode, name) =>\n      this.makeCommandMethod(name, cmdCode)\n    );\n    _.extend(prototype, intentMethods, commandMethods);\n  },\n\n  // Adds a new intent, including a method on nodes.\n  addIntent(intentName, _) {\n    this.u.registerNodeProperties({\n      [intentName]: this.makeIntentMethod(intentName)\n    });\n  },\n\n  // Adds a new command, including a method on nodes.\n  addCommand(commandName, commandCode) {\n    this.u.registerNodeProperties({\n      [commandName]: this.makeCommandMethod(commandName, commandCode)\n    });\n  },\n\n  // Generates a method that executes a command and triggers events about it.\n  makeCommandMethod(commandName, commandCode) {\n    return function(...args) {\n      this.trigger('before:' + commandName, {args: args});\n      let result = commandCode.apply(this, args);\n      this.trigger('after:' + commandName, {args: args});\n      return result;\n    }\n  },\n\n  // Generates a method that will send a named intent with the right parameters when called.\n  makeIntentMethod(intentName) {\n    let client = this;\n    return function(...args) {\n      // this here will be the node we're called upon\n      let intentId = client._nextIntentId++;\n      let intent = [cs.INTENT, intentName, this.path(), cs.serializeAll(args), intentId];\n      client.send(intent);\n\n      return new Promise((resolve, reject) => {\n        client._pendingIntents[intentId] = {name: intentName, target: this, resolve: resolve, reject: reject};\n      });\n    }\n  },\n\n  // Applies a response to an intent sent earlier.\n  applyIntentResponse([code, status, intentId, resultOrMessage]) {\n    let intent = this._pendingIntents[intentId];\n    if (!intent)\n      throw new Error(`Received response to an unknown or expired intent: ${intentId}.`);\n\n    if (status == cs.RESPONSE_OK) {\n      intent.resolve(cs.deserialize(this.u, resultOrMessage));\n    } else if (status == cs.RESPONSE_ERROR) {\n      intent.reject({intent: intent.name, target: intent.target, message: resultOrMessage});\n      intent.target.trigger('error', {intent: intent.name, message: resultOrMessage});\n    } else {\n      throw new Error(`Unrecognized intent response status: ${status}.`);\n    }\n\n    delete this._pendingIntents[intentId];\n  },\n\n  // Applies a command received from the server to the local state.\n  applyCommand([messageCode, commandName, objectPath, args, optionalExtras]) {\n    // extract the information from the command\n    let u = this.u;\n    let target = u(objectPath);\n    args = cs.deserializeAll(u, args);\n\n    // ensure the command's existence\n    if (!target[commandName])\n      throw new Error(`Received unknown command: '${commandName}'.`);\n\n    // if extras were sent, make them available to client-side plugins for perusal\n    // otherwise, set an empty object to make it easy to use\n    this._commandExtras = optionalExtras || {};\n\n    try {\n      // run the command!\n      let result = target[commandName].apply(target, args);\n      // clean up and return result\n      delete this._commandExtras;\n      return result;\n    } catch(e) {\n      // clean up on error and rethrow\n      delete this._commandExtras;\n      throw e;\n    }\n  },\n\n  // Returns the extras sent by the server for the currently running command\n  getCommandExtras() {\n    if (!this._commandExtras)\n      throw new Error(\"There is no command currently running, no extras are available.\");\n    return this._commandExtras;\n  }\n};\n"],"sourceRoot":"../../../lib"}