{"version":3,"sources":["plugins/rng.js"],"names":[],"mappings":"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","file":"plugins/rng.js","sourcesContent":["import _ from 'lodash';\nimport generators from 'rng';\n\nimport { functionized } from '../util';\n\nexport default function rng({version, seed}) {\n  if (version == 'client') {\n    return functionized(ClientRNGPlugin, [], 'applyPlugin');\n  } else if (version == 'server') {\n    return functionized(ServerRNGPlugin, [seed], 'applyPlugin');\n  } else {\n    throw new Error(\"Initialize RNG plugin either as rng({version: 'server'}) or rng({version: 'client'}).\");\n  }\n}\n\nlet CommonRNG = {\n  applyPlugin(u) {\n    return {\n      name: 'rng',\n      methods: {\n        rng: {\n          u: u,\n          int: this.randomInt,\n          pick: this.randomPick,\n          shuffle: this.shuffle\n        }\n      }\n    };\n  },\n\n  randomPick(collection) {\n    return collection[this.u.rng.int(0, collection.length)]\n  },\n\n  shuffle(xs) {\n    for (let highIndex = xs.length - 1; highIndex > 0; highIndex--) {\n      let lowIndex = this.u.rng.int(0, highIndex+1);\n\n      let t = xs[highIndex];\n      xs[highIndex] = xs[lowIndex];\n      xs[lowIndex] = t;\n    }\n\n    return xs;\n  }\n};\n\nfunction ServerRNGPlugin(seed) {\n  if (seed === undefined) seed = process.hrtime()[1]; // obviously, we'll want a better seed at some point\n  this.generator = new generators.MT(seed);\n}\nServerRNGPlugin.prototype = _.extend(Object.create(CommonRNG), {\n  randomInt(low, high) {\n    let u = this.u, result = low + Math.floor(u.plugins.rng.generator.uniform() * (high - low));\n\n    // store this result in command extras to be replicated on the client\n    let extras = u.plugins.server.getCommandExtras();\n    if (extras.rng) {\n      extras.rng.push(result);\n    } else {\n      extras.rng = [result];\n    }\n\n    // give the result back\n    return result;\n  }\n});\n\nfunction ClientRNGPlugin() {\n}\nClientRNGPlugin.prototype = _.extend(Object.create(CommonRNG), {\n  randomInt(low, high) {\n    let u = this.u;\n\n    // get the results from the server\n    let results = u.plugins.client.getCommandExtras().rng;\n    if (!results || (!results.length))\n      throw new Error(\"Something went wrong with the RNG - no server results available.\");\n\n    // is it kosher?\n    let result = results.shift();\n    if (result < low || result >= high)\n      throw new Error(\"Something went wrong with the RNG - server-reported results don't match the expected range.\");\n\n    // yup\n    return result\n  }\n});\n"],"sourceRoot":"../../../lib"}