{"version":3,"sources":["plugins/server.js"],"names":[],"mappings":"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","file":"plugins/server.js","sourcesContent":["var _ = require('lodash');\n\nimport {COMMAND, INTENT, parseMessage, BUILTIN_COMMANDS} from \"./client-server-base\";\n\nexport default function server(options) {\n  let serverPlugin = new ServerPlugin(options);\n  return function(...args) {\n    return serverPlugin.applyPlugin.apply(serverPlugin, args);\n  }\n}\n\nclass ServerPlugin {\n  constructor({communication, intents = {}, commands = {}}) {\n    _.extend(this, {communication, intents, commands});\n    _.extend(this.commands, BUILTIN_COMMANDS);\n\n    this.clients = [];\n\n    this.communication.onAttach((client) => this.attach(client));\n    this.communication.onDetach((client) => this.detach(client));\n    this.communication.onReceive((client, msg) => this.receive(client, msg));\n  }\n\n  applyPlugin($$) {\n    this.$$ = $$;\n    this.addNodeMethods();\n\n    return {\n      methods: {\n        addIntent: this.addIntent.bind(this),\n        addCommand: this.addCommand.bind(this)\n      }\n    };\n  }\n\n  attach(client) {\n    this.clients.push(client);\n\n    let $$ = this.$$, rootState = $$('').state();\n    this.sendTo(client, [COMMAND, '_seed', '', [rootState]]);\n  }\n\n  detach(client) {\n    let position = this.clients.indexOf(client);\n    if (position >= 0)\n      this.clients.splice(position, 1);\n  }\n\n  receive(client, msgString) {\n    parseMessage(msgString, (message) => {\n      let [messageType] = message;\n      switch (messageType) {\n        case INTENT:\n          return this.applyIntent(client, message);\n        case COMMAND:\n          throw new Error(\"Servers do not obey commands.\")\n      }\n    });\n  }\n\n  sendToAll(message) {\n    let msgString = JSON.stringify(message);\n    _.each(this.clients, (client) => {\n      this.communication.sendTo(client, msgString);\n    });\n  }\n\n  sendTo(client, message) {\n    let msgString = JSON.stringify(message);\n    this.communication.sendTo(client, msgString);\n  }\n\n  applyIntent(client, [code, intentName, objectPath, parameters]) {\n    let intentFn = this.intents[intentName];\n    let $$ = this.$$, target = $$(objectPath);\n\n    let fullParameters = parameters.concat(client);\n    return intentFn.apply(target, fullParameters);\n  }\n\n  addNodeMethods() {\n    _.each(this.commands, this.addCommand.bind(this));\n    _.each(this.intents, this.addIntent.bind(this));\n  }\n\n  addCommand(commandCode, commandName) {\n    this.$$.registerNodeProperties({\n      [commandName]: this.makeCommandMethod(commandName, commandCode)\n    });\n  }\n\n  addIntent(intentCode, intentName) {\n    this.$$.registerNodeProperties({\n      [intentName]: intentCode\n    });\n  }\n\n  makeCommandMethod(commandName, commandFn) {\n    let server = this;\n    return function(...parameters) {\n      // 'this' refers to the Node on which the method was called here\n      commandFn.apply(this, parameters); // apply the changes on the server\n      server.sendToAll([COMMAND, commandName, this.path(), parameters]); // send the changes to all the clients\n    }\n  }\n}\n"],"sourceRoot":"../../../lib"}