{"version":3,"sources":["plugins/templates.js"],"names":[],"mappings":";;;;AAIwB,SAAS,qBAFM,SAAS,EAFhD,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,AAIX,SAAS,SAAS,CAAC,OAAO,EAAE;AACzC,SAAO,wBAAa,eAAe,EAAE,CAAC,OAAO,CAAC,EAAE,aAAa,CAAC,CAAC,CAChE;;;AAED,SAAS,eAAe,CAAC,SAAS,EAAE;AAClC,MAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAC5B;;AACD,eAAe,CAAC,SAAS,GAAG;AAC1B,aAAW,EAAA,qBAAC,CAAC,EAAE;AACb,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC;;;;AAIX,KAAC,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAC,QAAQ,EAAE,CAAC,KAAK,EAAC,CAAC,CAAC;;AAErF,WAAO;AACL,aAAO,EAAE;AACP,gBAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EACnC;;AACD,iBAAW,EAAE;AACX,aAAK,EAAE,KAAK,EACb,EACF,CAAA,CACF;;;;;AAED,UAAQ,EAAA,kBAAC,IAAI,EAAE;AACb,WAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CACpC;;;AAED,uBAAqB,EAAA,+BAAC,GAAG,EAAE;AACzB,QAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;;;AAGrB,QAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO;;;AAG9B,QAAI,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;AACpC,QAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AACnD,QAAI,CAAC,QAAQ,EAAE;AACb,YAAM,IAAI,KAAK,2CAAwC,YAAY,yCAAqC,CAAC,CAC1G;;;;;AAID,QAAI,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AAChE,QAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;AACxC,KAAC,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC,CAChD,EACF,CAAC;;;;AAEF,SAAS,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE;AACnC,MAAI,WAAW,GAAG,AAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,GAAI,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AAClH,MAAI,EAAE,GAAG,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;AAC7C,SAAO,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC,CACjE","file":"plugins/templates.js","sourcesContent":["let _ = require('lodash');\n\nimport { functionized, isObject } from '../util';\n\nexport default function templates(options) {\n  return functionized(TemplatesPlugin, [options], 'applyPlugin');\n}\n\nfunction TemplatesPlugin(templates) {\n  this.templates = templates;\n}\nTemplatesPlugin.prototype = {\n  applyPlugin(u) {\n    this.u = u;\n\n    // register a listener that should *always* run first when an object is created,\n    // so that other listeners don't see an uninitialized state\n    u.listen('**', 'created', this.applyTemplateIfNeeded.bind(this), {priority: -10000});\n\n    return {\n      methods: {\n        template: this.template.bind(this)\n      },\n      nodeMethods: {\n        spawn: spawn\n      }\n    }\n  },\n\n  template(name) {\n    return _.get(this.templates, name);\n  },\n\n  applyTemplateIfNeeded(evt) {\n    let obj = evt.source;\n\n    // maybe we don't need to do anything?\n    if (!obj.get.template) return;\n\n    // find the right template\n    let templateName = obj.get.template;\n    let template = _.get(this.templates, templateName);\n    if (!template) {\n      throw new Error(`The object you added uses template '${templateName}', but no such template was found.`);\n    }\n\n    // replace Unison's state object with a correctly prototyped one\n    // this is heart surgery, but no cleaner way to do this\n    let newObjectState = _.extend(Object.create(template), obj.get);\n    let unisonState = this.u.currentState();\n    _.set(unisonState, obj.path(), newObjectState);\n  }\n};\n\nfunction spawn(template, properties) {\n  let lastSegment = (template.lastIndexOf(\".\") >= 0) ? template.substring(template.lastIndexOf(\".\") + 1) : template;\n  let id = lastSegment + \"#\" + this.u.nextId();\n  return this.add(id, _.extend(properties, {template: template}));\n}"],"sourceRoot":"../../../lib"}