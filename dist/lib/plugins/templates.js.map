{"version":3,"sources":["plugins/templates.js"],"names":[],"mappings":";;;;AAIwB,SAAS,qBAFM,SAAS,EAFhD,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,AAIX,SAAS,SAAS,CAAC,OAAO,EAAE;AACzC,SAAO,UAHA,YAAY,EAGC,eAAe,EAAE,CAAC,OAAO,CAAC,EAAE,aAAa,CAAC,CAAC,CAChE;;;AAED,SAAS,eAAe,CAAC,SAAS,EAAE;AAClC,MAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAC5B;;AACD,eAAe,CAAC,SAAS,GAAG;AAC1B,aAAW,EAAA,qBAAC,CAAC,EAAE;AACb,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,WAAO;AACL,wBAAkB,EAAE;AAClB,WAAG,EAAE,IAAI,CAAC,cAAc,EAAE,EAC3B;;;;WAIF,CAAA,CACF;;;;AAED,gBAAc,EAAA,0BAAG;AACf,QAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC/B,WAAO,UAAS,IAAI,EAAW,mCAAN,IAAI,mEAAJ,IAAI;AAC3B,UAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;AACpB,YAAI,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CACrD;AAAM;AACL,YAAI,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CACrD;;;;AAGD,aAAO,IAAI,CAAC,KAAK,CAAC,IAAI,YAAM,IAAI,EAAE,CAAC,CACpC,CAAA,CACF,EACF,CAAC;;;;;AAEF,SAAS,qBAAqB,CAAC,SAAS,EAAE,GAAG,EAAE;;AAE7C,MAAI,CAAC,UAvCgB,QAAQ,EAuCf,GAAG,CAAC,IAAK,CAAC,GAAG,CAAC,QAAQ,AAAC;AACnC,SAAO;;;AAGT,MAAI,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC;AAChC,MAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AAC9C,MAAI,CAAC,QAAQ,EAAE;AACb,UAAM,IAAI,KAAK,2CAAwC,YAAY,yCAAqC,CAAC,CAC1G;;;;AAGD,SAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAC/C","file":"plugins/templates.js","sourcesContent":["let _ = require('lodash');\n\nimport { functionized, isObject } from '../util';\n\nexport default function templates(options) {\n  return functionized(TemplatesPlugin, [options], 'applyPlugin');\n}\n\nfunction TemplatesPlugin(templates) {\n  this.templates = templates;\n}\nTemplatesPlugin.prototype = {\n  applyPlugin(u) {\n    this.u = u;\n    return {\n      nodeMethodWrappers: {\n        add: this.makeAddWrapper()\n      }/*,\n      nodeMethods: {\n        spawn: spawn\n      }*/\n    }\n  },\n\n  makeAddWrapper() {\n    let templates = this.templates;\n    return function(oAdd, ...args) {\n      if (args.length == 1) {\n        args[0] = applyTemplateIfNeeded(templates, args[0]);\n      } else {\n        args[1] = applyTemplateIfNeeded(templates, args[1]);\n      }\n\n      // invoke original add with the modified object\n      return oAdd.apply(this, [...args]);\n    }\n  }\n};\n\nfunction applyTemplateIfNeeded(templates, obj) {\n  // does this object want us to do something?\n  if (!isObject(obj) || (!obj.template))\n    return;\n\n  // find the right template\n  let templateName = obj.template;\n  let template = _.get(templates, templateName);\n  if (!template) {\n    throw new Error(`The object you added uses template '${templateName}', but no such template was found.`);\n  }\n\n  // create a new object with the template as prototype, and otherwise the same properties\n  return _.extend(Object.create(template), obj);\n}"],"sourceRoot":"../../../lib"}