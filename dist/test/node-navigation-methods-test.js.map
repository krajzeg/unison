{"version":3,"sources":["node-navigation-methods-test.js"],"names":[],"mappings":"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","file":"node-navigation-methods-test.js","sourcesContent":["var assert = require('chai').assert;\nvar unison = require('../lib');\n\ndescribe(\"Node operations\", () => {\n  let u = unison({\n    creatures: {\n      goblin: {\n        life: 7\n      },\n      knight: {\n        shield: {armor: 3},\n        life: 8\n      },\n      orc: {\n        life: 9\n      }\n    },\n    turn: 3\n  });\n\n  describe(\"parent()\", () => {\n    it(\"should return the correct parent node\", () => {\n      assert.ok(u('creatures.knight.shield').parent().is(u('creatures.knight')));\n      assert.ok(u('creatures.knight').parent().is(u('creatures')));\n      assert.ok(u('creatures').parent().is(u()));\n    });\n    it(\"should throw when used on the root node\", () => {\n      assert.throws(() => u().parent());\n    });\n  });\n\n  describe(\"child()\", () => {\n    it(\"should find children correctly\", () => {\n      assert.ok(u().child('creatures').is(u('creatures')));\n      assert.ok(u('creatures').child('knight').is(u('creatures.knight')));\n      assert.ok(u('creatures').child('knight').child('shield').is(u('creatures.knight.shield')));\n    });\n    it(\"should work for non-existent nodes\", () => {\n      assert.ok(u().child('bogus').is(u('bogus')));\n    });\n  });\n\n  describe(\"find()\", () => {\n    it(\"should find descendants correctly\", () => {\n      assert.ok(u().find(\"creatures.knight\").is(u('creatures.knight')));\n      assert.ok(u(\"creatures\").find(\"knight\").is(u('creatures.knight')));\n      assert.ok(u(\"creatures\").find(\"knight.shield\").is(u('creatures.knight.shield')));\n    });\n    it(\"should work for non-existent nodes\", () => {\n      assert.ok(u().find(\"bogus.node\").is(u(\"bogus.node\")));\n    });\n  });\n\n  describe(\"is()\", () => {\n    it(\"should return true for different objects pointing to the same node\", () => {\n      assert.ok(u('creatures.goblin').is(u('creatures.goblin')));\n      assert.ok(u().is(u()));\n      assert.ok(u('creatures.knight.shield').is(u('creatures.knight.shield')));\n    });\n    it(\"should return false for objects pointing to different nodes\", () => {\n      assert.ok(!u('creatures.goblin').is(u('creatures.orc')));\n    });\n    it(\"should return true for objects pointing to the same node at different timestamps\", () => {\n      assert.ok(u('creatures.goblin').at(0).is(u('creatures.goblin')));\n    });\n    /*it(\"should return false when asked if we are null or undefined\", () => {\n      assert.ok(!u('creatures.goblin').is(null));\n      assert.ok(!u('creatures.goblin').is(undefined));\n    });*/\n  });\n\n  describe(\"children()\", () => {\n    it(\"should return all child objects and no properties\", () => {\n      let rootChildren = u().children().map((n) => n.path());\n      let creatures = u('creatures').children().map((n) => n.path());\n      let knightsPossessions = u('creatures.knight').children().map((n) => n.path());\n\n      assert.sameMembers(rootChildren, ['creatures']);\n      assert.sameMembers(creatures, ['creatures.goblin', 'creatures.knight', 'creatures.orc']);\n      assert.sameMembers(knightsPossessions, ['creatures.knight.shield']);\n    });\n  });\n\n  describe(\"root()\", () => {\n    it(\"should find the root node correctly\", () => {\n      let root = u();\n      assert.ok(u('creatures.goblin').root().is(root));\n      assert.ok(u('creatures.knight.shield').root().is(root));\n      assert.ok(u('creatures').root().is(root));\n      assert.ok(u().root().is(root));\n    });\n  });\n\n});\n"],"sourceRoot":"../../test"}