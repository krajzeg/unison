{"version":3,"sources":["plugin-test.js"],"names":[],"mappings":";;;AAG6B,aAAa,EAH1C,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAI/B,QAAQ,CAAC,SAAS,EAAE,YAAM;AACxB,IAAE,CAAC,yDAAyD,EAAE,YAAM;AAClE,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;;AAEnB,KAAC,CAAC,MAAM,CAAC,YAAM;AACb,aAAO;AACL,eAAO,EAAE;AACP,kBAAQ,EAAE,4BAAM,QAAQ,EAAA,EACzB,EACF,CAAC,CACH,CAAC,CAAC;;;;;AAEH,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC,CACtC,CAAC,CAAC;;;AAEH,IAAE,CAAC,wCAAwC,EAAE,YAAM;AACjD,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,CAAC,CAAC;AAC9B,KAAC,CAAC,MAAM,CAAC,YAAM;AACb,aAAO;AACL,mBAAW,EAAE;AACX,uBAAa,EAAA,yBAAG,CAAE,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAE,EACtD,EACF,CAAA,CACF,CAAC,CAAC;;;;;AAEH,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE,OAAO,CAAC,CAAC,CACnD,CAAC,CAAC;;;AAEH,IAAE,CAAC,sEAAsE,EAAE,YAAM;AAC/E,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;;AAEnB,KAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAK;AACnB,YAAM,CAAC,SAAS,GAAG,IAAI,CAAC,CACzB,CAAC,CAAC;;;AAEH,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CACjC,CAAC,CAAC;;;AAEH,IAAE,CAAC,gDAAgD,EAAE,YAAM;AACzD,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,QAAQ,EAAE,EAAE,EAAC,CAAC,CAAC;AAC/B,KAAC,CAAC,MAAM,CAAC,YAAM;AACb,aAAO;AACL,sBAAc,EAAE;AACd,gBAAM,EAAA,gBAAC,OAAO,EAAE;AACd,gBAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrC,mBAAO,GAAG,GAAG,UAAU,CAAC,CACzB,EACF,EACF,CAAA,CACF,CAAC,CAAC;;;;;;AAEH,KAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC,CAAC;AACvC,UAAM,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAA,CAC9B,CAAC,CAAC;;;AAEH,IAAE,CAAC,8CAA8C,EAAE,YAAM;AACvD,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,CAAC,CAAC;AAC9B,KAAC,CAAC,MAAM,CAAC,YAAM;AACb,aAAO;AACL,0BAAkB,EAAE;AAClB,aAAG,EAAA,aAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE;AACjB,gBAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAC3C,EACF,EACF,CAAA,CACF,CAAC,CAAC;;;;;;AAEH,KAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAC3B,UAAM,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAA,CAC/B,CAAC,CAAC;;;AAEH,IAAE,CAAC,uEAAuE,EAAE,YAAM;AAChF,aAAS,UAAU,GAAG;AACpB,UAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAClB;;AACD,cAAU,CAAC,SAAS,GAAG;AACrB,WAAK,EAAA,iBAAG,CAAE,OAAO,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAE,EACnC,CAAC;;AACF,QAAI,UAAU,GAAG,2BAAa,UAAU,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;;AAEvD,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;;AAEtC,UAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1B,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CACzC,CAAC,CAAA,CACH,CAAC,CAAC","file":"plugin-test.js","sourcesContent":["let assert = require('chai').assert;\nlet unison = require('../lib');\n\nimport { functionized } from '../lib/util';\n\ndescribe(\"Plugins\", () => {\n  it(\"should be able to add methods to the core Unison object\", () => {\n    let u = unison({});\n\n    u.plugin(() => {\n      return {\n        methods: {\n          greeting: () => \"Hello!\"\n        }\n      };\n    });\n\n    assert.equal(u.greeting(), \"Hello!\");\n  });\n\n  it(\"should be able to add methods to nodes\", () => {\n    let u = unison({'apple': {}});\n    u.plugin(() => {\n      return {\n        nodeMethods: {\n          uppercasePath() { return this.path().toUpperCase(); }\n        }\n      }\n    });\n\n    assert.equal(u('apple').uppercasePath(), 'APPLE');\n  });\n\n  it(\"should be able to affect the Unison object directly if really needed\", () => {\n    let u = unison({});\n\n    u.plugin((unison) => {\n      unison.iWasThere = true;\n    });\n\n    assert.equal(u.iWasThere, true);\n  });\n\n  it(\"should be able to wrap selected unison methods\", () => {\n    let u = unison({'things': {}});\n    u.plugin(() => {\n      return {\n        methodWrappers: {\n          nextId(oNextId) {\n            let standardId = oNextId.apply(this);\n            return '#' + standardId;\n          }\n        }\n      }\n    });\n\n    u('things').add({name: 'screwdriver'});\n    assert.ok(u('things.#1').get)\n  });\n\n  it(\"should be able to wrap selected node methods\", () => {\n    let u = unison({'apple': {}});\n    u.plugin(() => {\n      return {\n        nodeMethodWrappers: {\n          add(oAdd, id, obj) {\n            oAdd.apply(this, [id.toLowerCase(), obj]);\n          }\n        }\n      }\n    });\n\n    u('apple').add('SEED', {});\n    assert.ok(u('apple.seed').get)\n  });\n\n  it(\"should be accessible through the unison object if they provide a name\", () => {\n    function TestPlugin() {\n      this.answer = 42;\n    }\n    TestPlugin.prototype = {\n      apply() { return {name: \"test\"}; }\n    };\n    let testPlugin = functionized(TestPlugin, [], 'apply');\n\n    let u = unison({}).plugin(testPlugin);\n\n    assert.ok(u.plugins.test);\n    assert.equal(u.plugins.test.answer, 42);\n  })\n});"],"sourceRoot":"../../test"}