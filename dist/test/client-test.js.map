{"version":3,"sources":["client-test.js"],"names":[],"mappings":"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","file":"client-test.js","sourcesContent":["var assert = require('chai').assert;\nvar unison = require('../lib');\nvar client = require('../lib').client;\nvar sinon = require('sinon');\nvar Promise = require('bluebird');\nvar CommunicationMock = require('./mocks/client-comm');\n\ndescribe(\"Client plugin\", () => {\n  it(\"should translate intent methods into network messages properly\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      commands: {},\n      intents: {\n        frob(howHard) {\n          // body irrelevant on the client\n        },\n        ageBy(howMany, units) {\n          // body irrelevant on the client\n        }\n      }\n    });\n\n    u('bird').frob('very hard');\n    u('bird').ageBy(5, 'years');\n\n    assert.deepEqual(comm.sentMessages, [\n     ['i', 'frob', 'bird', ['very hard'], 1],\n     ['i', 'ageBy', 'bird', [5, 'years'], 2]\n    ]);\n  });\n\n  it(\"should translate command methods into simple executions\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({});\n    u.plugin(client({communication: comm}));\n    u.define({\n      commands: {\n        frob() {\n          this.update({frobbed: true});\n        }\n      },\n      intents: {}\n    });\n\n    u('').frob();\n    assert.ok(u('').get.frobbed);\n    assert.deepEqual(comm.sentMessages, []);\n  });\n\n  it(\"should trigger 'before:X' and 'after:X' events for command executions\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({frobbed: false});\n    u.plugin(client({communication: comm}));\n    u.define({\n      commands: {\n        frob() {\n          this.update({frobbed: true});\n        }\n      }\n    });\n\n    let beforeFrobState, afterFrobState;\n    u().on('before:frob', (evt) => { beforeFrobState = evt.snapshot.get.frobbed });\n    u().on('after:frob',  (evt) => { afterFrobState  = evt.snapshot.get.frobbed });\n\n    comm.pushServerCommand('frob', '');\n\n    assert.strictEqual(beforeFrobState, false);\n    assert.strictEqual(afterFrobState, true);\n  });\n\n  it(\"should apply commands sent by the server\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      commands: {\n        frob(howHard) {\n          this.update({frobbed: howHard});\n        }\n      },\n      intents: {}\n    });\n\n    comm.pushServerCommand('frob', 'bird', 'very hard');\n\n    assert.equal(u('bird').get.frobbed, 'very hard');\n  });\n\n  it(\"should not break on receiving various broken messages\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n\n    comm.pushServerString(\"[\"); // broken JSON\n    comm.pushServerString(\"fw0ur0q923\"); // not JSON\n    comm.pushServerString(\"123\"); // not a command or intent\n    comm.pushServerString(\"[1,2,3,4]\"); // bad format\n    comm.pushServerCommand('bogusCommand', 'bogusObject', 'bogus'); // non-existent command\n\n    // if we reach the end of the test, we should be OK\n  });\n\n  it(\"should handle '_seed' commands out of the box\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({});\n    u.plugin(client({communication: comm}));\n\n    let listener = sinon.spy();\n    u.listen('*', 'created', listener);\n\n    comm.pushServerCommand('_seed', '', {bird: {wingspan: 6}, seeded: true});\n\n    assert.equal(u('seeded').get, true);\n    assert.equal(u('bird').get.wingspan, 6);\n    assert.ok(listener.calledOnce);\n  });\n\n  it(\"should produce the same IDs as the server after being seeded\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({});\n    u.plugin(client({communication: comm}));\n\n    comm.pushServerCommand('_seed', '', {_nextId: 6, bird: {wingspan: 6}, seeded: true});\n\n    assert.equal(u().add({}).id(), '6');\n  });\n\n  it(\"should serialize objects in intent arguments correctly\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}, human: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      intents: {\n        frob(somebodyElse) {}\n      }\n    });\n\n    u('bird').frob(u('human'));\n\n    assert.deepEqual(comm.sentMessages, [\n      ['i', 'frob', 'bird', [{_u: 'human'}], 1],\n    ]);\n  });\n\n  it(\"should deserialize objects in received command arguments\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      commands: {\n        frob(who) {\n          who.update({frobbed: true});\n        }\n      },\n      intents: {}\n    });\n\n    comm.pushServerCommand('frob', '', {_u: 'bird'});\n\n    assert.equal(u('bird').get.frobbed, true);\n  });\n\n  it(\"should resolve intent promises with return values from the server\", (done) => {\n    let comm = new CommunicationMock(), resolvedSpy = sinon.spy();\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      intents: { frob() {} }\n    });\n\n    u('bird').frob()\n      .then((result) => {\n        assert.equal(result.path(), 'bird')\n      })\n      .then(resolvedSpy)\n      .then(done).catch(done);\n\n    assert.ok(!resolvedSpy.called);\n    comm.pushServerResponse('ok', 1, {_u: 'bird'});\n  });\n\n  it(\"should reject intent promises with errors from the server\", (done) => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      intents: { frob() {} }\n    });\n\n    expectRejection(u('bird').frob())\n      .then((err) => {\n        assert.equal(err.intent, 'frob');\n        assert.equal(err.target.path(), 'bird');\n        assert.equal(err.message, \"Oops.\");\n      }).then(done).catch(done);\n\n    comm.pushServerResponse('err', 1, \"Oops.\");\n  });\n\n  it(\"should trigger 'error' events when an intent fails\", () => {\n    let comm = new CommunicationMock(), errorSpy = sinon.spy();\n    let u = unison({bird: {}});\n    u.plugin(client({communication: comm}));\n    u.define({\n      intents: { frob() {} }\n    });\n\n    u('bird').on('error', errorSpy);\n    u('bird').frob().catch(() => {});\n    comm.pushServerResponse('err', 1, \"Oops.\");\n\n    assert.ok(errorSpy.calledOnce);\n  });\n\n  it(\"should let us recognize that we're on the clientside\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({}).plugin(client({communication: comm}));\n\n    assert.ok(u.clientSide);\n  });\n\n  it(\"should make command extras sent by the server available during command execution\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({});\n    u.plugin(client({communication: comm}));\n    u.define({\n      commands: {\n        applySpecialSauce() {\n          let u = this.u, sauce = u.plugins.client.getCommandExtras().sauce;\n          u().update({sauce});\n        }\n      }\n    });\n\n    comm.pushServerString('[\"c\",\"applySpecialSauce\",\"\",[],{\"sauce\":\"worcestershire\"}]');\n\n    assert.equal(u().get.sauce, \"worcestershire\");\n  });\n\n  it(\"should distinguish types correctly when applying commands\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({\n      bird: {_t:'Bird'},\n      dog: {_t:'Dog'}\n    });\n    u.plugin(client({communication: comm}));\n\n    u.define('Bird', {\n      commands: {\n        makeNoise() { this.update({chirped: true}); }\n      }\n    });\n    u.define('Dog', {\n      commands: {\n        makeNoise() { this.update({bark: 'loud'})}\n      }\n    });\n\n    comm.pushServerCommand('makeNoise', 'bird', []);\n    comm.pushServerCommand('makeNoise', 'dog', []);\n\n    assert.equal(u('bird').get.chirped, true);\n    assert.equal(u('dog').get.bark, 'loud');\n  });\n});\n\nfunction expectRejection(promise) {\n  return new Promise((resolve, reject) => {\n    promise.then((result) => {\n      reject(`The promise wasn't rejected, but resolved with value ${result}.`);\n    }).catch(resolve);\n  });\n}"],"sourceRoot":"../../test"}