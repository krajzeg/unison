{"version":3,"sources":["client-test.js"],"names":[],"mappings":"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","file":"client-test.js","sourcesContent":["var assert = require('chai').assert;\r\nvar unison = require('../lib');\r\nvar client = require('../lib/plugins/client');\r\nvar CommunicationMock = require('./mocks/client-comm');\r\n\r\ndescribe(\"Unison network client\", () => {\r\n  it(\"should translate intent methods into network messages properly\", () => {\r\n    let comm = new CommunicationMock();\r\n\r\n    let $$ = unison({bird: {}})\r\n      .plugin(client({\r\n        communication: comm,\r\n        commands: {},\r\n        intents: {\r\n          frob(howHard) {\r\n            // body irrelevant on the client\r\n          },\r\n          ageBy(howMany, units) {\r\n            // body irrelevant on the client\r\n          }\r\n        }\r\n      }));\r\n\r\n    $$('bird').frob('very hard');\r\n    $$('bird').ageBy(5, 'years');\r\n\r\n    assert.deepEqual(comm.sentMessages, [\r\n     ['i', 'frob', 'bird', ['very hard']],\r\n     ['i', 'ageBy', 'bird', [5, 'years']]\r\n    ]);\r\n  });\r\n\r\n  it(\"should apply commands sent by the server\", () => {\r\n    let comm = new CommunicationMock();\r\n    let $$ = unison({bird: {}})\r\n      .plugin(client({\r\n        communication: comm,\r\n        commands: {\r\n          frob(howHard) {\r\n            this.update({frobbed: howHard});\r\n          }\r\n        },\r\n        intents: {}\r\n      }));\r\n\r\n    comm.pushServerCommand('frob', 'bird', 'very hard');\r\n\r\n    assert.equal($$('bird').state().frobbed, 'very hard');\r\n  });\r\n\r\n  it(\"should not break on receiving various broken messages\", () => {\r\n    let comm = new CommunicationMock();\r\n    let $$ = unison({bird: {}})\r\n      .plugin(client({\r\n        communication: comm,\r\n        commands: {}, intents: {}\r\n      }));\r\n\r\n    comm.pushServerString(\"[\"); // broken JSON\r\n    comm.pushServerString(\"fw0ur0q923\"); // not JSON\r\n    comm.pushServerString(\"123\"); // not a command or intent\r\n    comm.pushServerString(\"[1,2,3,4]\"); // bad format\r\n    comm.pushServerCommand('bogusCommand', 'bogusObject', 'bogus'); // non-existent command\r\n\r\n    // if we reach the end of the test, we should be OK\r\n  });\r\n\r\n  it(\"should handle _seed commands out of the box\", () => {\r\n    let comm = new CommunicationMock();\r\n    let $$ = unison({})\r\n      .plugin(client({\r\n        communication: comm,\r\n        commands: {},\r\n        intents: {}\r\n      }));\r\n\r\n    comm.pushServerCommand('_seed', '', {bird: {wingspan: 6}, seeded: true});\r\n\r\n    assert.equal($$('seeded').state(), true);\r\n    assert.equal($$('bird').state().wingspan, 6);\r\n  });\r\n});"],"sourceRoot":"..\\..\\test"}