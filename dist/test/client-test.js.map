{"version":3,"sources":["client-test.js"],"names":[],"mappings":"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","file":"client-test.js","sourcesContent":["var assert = require('chai').assert;\nvar unison = require('../lib');\nvar client = require('../lib').client;\nvar sinon = require('sinon');\nvar CommunicationMock = require('./mocks/client-comm');\n\ndescribe(\"Client plugin\", () => {\n  it(\"should translate intent methods into network messages properly\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n      .plugin(client({\n        communication: comm,\n        commands: {},\n        intents: {\n          frob(howHard) {\n            // body irrelevant on the client\n          },\n          ageBy(howMany, units) {\n            // body irrelevant on the client\n          }\n        }\n      }));\n\n    u('bird').frob('very hard');\n    u('bird').ageBy(5, 'years');\n\n    assert.deepEqual(comm.sentMessages, [\n     ['i', 'frob', 'bird', ['very hard']],\n     ['i', 'ageBy', 'bird', [5, 'years']]\n    ]);\n  });\n\n  it(\"should translate command methods into simple executions\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({})\n      .plugin(client({\n        communication: comm,\n        commands: {\n          frob() {\n            this.update({frobbed: true});\n          }\n        },\n        intents: {}\n      }));\n\n    u('').frob();\n    assert.ok(u('').get.frobbed);\n    assert.deepEqual(comm.sentMessages, []);\n  });\n\n  it(\"should apply commands sent by the server\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}})\n      .plugin(client({\n        communication: comm,\n        commands: {\n          frob(howHard) {\n            this.update({frobbed: howHard});\n          }\n        },\n        intents: {}\n      }));\n\n    comm.pushServerCommand('frob', 'bird', 'very hard');\n\n    assert.equal(u('bird').get.frobbed, 'very hard');\n  });\n\n  it(\"should not break on receiving various broken messages\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}})\n      .plugin(client({\n        communication: comm,\n        commands: {}, intents: {}\n      }));\n\n    comm.pushServerString(\"[\"); // broken JSON\n    comm.pushServerString(\"fw0ur0q923\"); // not JSON\n    comm.pushServerString(\"123\"); // not a command or intent\n    comm.pushServerString(\"[1,2,3,4]\"); // bad format\n    comm.pushServerCommand('bogusCommand', 'bogusObject', 'bogus'); // non-existent command\n\n    // if we reach the end of the test, we should be OK\n  });\n\n  it(\"should handle '_seed' commands out of the box\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({})\n      .plugin(client({\n        communication: comm,\n        commands: {},\n        intents: {}\n      }));\n\n    let listener = sinon.spy();\n    u('').on('childAdded', listener);\n\n    comm.pushServerCommand('_seed', '', {bird: {wingspan: 6}, seeded: true});\n\n    assert.equal(u('seeded').get, true);\n    assert.equal(u('bird').get.wingspan, 6);\n    assert.ok(listener.calledOnce);\n  });\n\n  it(\"should allow adding commands and intents after the fact\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({})\n      .plugin(client({\n        communication: comm,\n        commands: {},\n        intents: {}\n      }));\n\n    u.addCommand('frob', function() {\n      this.update({frobbed: true});\n    });\n    u.addIntent('pleaseFrob', () => {});\n\n    u('').frob();\n    u('').pleaseFrob();\n\n    assert.ok(u('').get.frobbed);\n    assert.deepEqual(comm.sentMessages, [\n      ['i', 'pleaseFrob', '', []]\n    ]);\n  });\n});"],"sourceRoot":"../../test"}