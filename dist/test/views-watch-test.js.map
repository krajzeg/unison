{"version":3,"sources":["views-watch-test.js"],"names":[],"mappings":"aAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;AACpC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE7B,QAAQ,CAAC,uBAAuB,EAAE,YAAM;AACtC,MAAI,CAAC,YAAA,CAAC;AACN,YAAU,CAAC,YAAM;AACf,KAAC,GAAG,MAAM,CAAC,EAAC,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CACzC,CAAC,CAAC;;;AAEH,IAAE,CAAC,2DAA2D,EAAE,YAAM;AACpE,QAAI,KAAK,GAAG,EAAC,UAAU,EAAE,KAAK,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC;AAC9D,KAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAExB,KAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;AACjC,KAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;;AAErB,UAAM,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AACvC,UAAM,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CACvC,CAAC,CAAC;;;AAEH,IAAE,CAAC,sEAAsE,EAAE,YAAM;AAC/E,QAAI,KAAK,GAAG,EAAC,UAAU,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC;;AAEtC,KAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACxB,KAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;;AAErB,KAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACvB,KAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;AAE5B,UAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CACrC,CAAC,CAAC,CACJ,CAAC,CAAC","file":"views-watch-test.js","sourcesContent":["let _ = require('lodash');\nlet assert = require('chai').assert;\nlet unison = require('../lib');\nlet views = require('../lib').views;\nlet sinon = require('sinon');\n\ndescribe(\"Views plugin: watch()\", () => {\n  let u;\n  beforeEach(() => {\n    u = unison({stuff: {}}).plugin(views());\n  });\n\n  it(\"should bind all methods matching event names as listeners\", () => {\n    let spies = {childAdded: sinon.spy(), destroyed: sinon.spy()};\n    u('stuff').watch(spies);\n\n    u('stuff').add({name: \"hammer\"});\n    u('stuff').destroy();\n\n    assert.ok(spies.childAdded.calledOnce);\n    assert.ok(spies.destroyed.calledOnce);\n  });\n\n  it(\"should automatically unbind all listeners when the node is destroyed\", () => {\n    let spies = {childAdded: sinon.spy()};\n\n    u('stuff').watch(spies);\n    u('stuff').destroy();\n\n    u('').add('stuff', {});\n    u('stuff').add('psych', {});\n\n    assert.ok(!spies.childAdded.called);\n  });\n});"],"sourceRoot":"../../test"}