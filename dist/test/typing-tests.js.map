{"version":3,"sources":["typing-tests.js"],"names":[],"mappings":"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","file":"typing-tests.js","sourcesContent":["var assert = require('chai').assert;\nvar unison = require('../lib');\n\ndescribe(\"Type system\", () => {\n  it(\"should let us get the type of each node via a type() method\", () => {\n    let u = unison({});\n    u.define('Fruit');\n\n    u().add('orange', {_t: 'Fruit', name: 'orange'});\n\n    assert.equal(u('orange').type().name, 'Fruit');\n  });\n\n  it(\"should use Node as the type of nodes that don't choose otherwise\", () => {\n    let u = unison({});\n    let node = u().add({});\n    assert.equal(node.type().name, 'Node');\n  });\n\n  it(\"should use Root as the default type of the root node\", () => {\n    let u = unison({});\n    assert.equal(u().type().name, 'Root');\n  });\n\n  it(\"should let objects of the type to be added easily via a constructor-like function\", () => {\n    let u = unison({});\n    u.define('Vegetable');\n\n    u().add('cucumber', u.Vegetable({name: 'cucumber'}));\n    assert.equal(u('cucumber').type(), u.types.Vegetable);\n    assert.equal(u('cucumber').get.name, 'cucumber');\n  });\n\n  it(\"should expose the properties from the Node type on nodes of all types\", () => {\n    let u = unison({});\n    u.define('Fruit');\n    let orange = u().add(u.Fruit({name: 'orange'}));\n\n    u.types.Node.proto.name = function() { return this.get.name; }\n\n    assert.equal(orange.name(), 'orange');\n  });\n\n  it(\"should expose the properties of leaf types only on nodes of that type\", () => {\n    let u = unison({});\n    u.define('Monster');\n    let goblin = u().add(u.Monster({strength: 12}));\n    let acid = u().add({strength: 15});\n\n    u.types.Monster.proto.strength = function() { return this.get.strength; }\n\n    assert.equal(goblin.strength(), 12);\n    assert.throws(() => acid.strength());\n  });\n\n});"],"sourceRoot":"../../test"}