{"version":3,"sources":["relations-test.js"],"names":[],"mappings":"aAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;AACtC,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;AAC5C,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE7B,QAAQ,CAAC,kBAAkB,EAAE,YAAM;;AAEjC,IAAE,CAAC,iFAAiF,EAAE,YAAM;AAC1F,QAAI,CAAC,GAAG,qBAAqB,CAAC;AAC5B,MAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAC,CACjE,CAAC,CAAC;;;AAEH,QAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;;AAE3E,OAAG,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AAC9B,SAAK,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;;AAE7B,UAAM,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/B,UAAM,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9B,UAAM,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/B,UAAM,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAC/B,CAAC,CAAC;;;AAEH,IAAE,CAAC,iDAAiD,CAAC,CAAC;AACtD,IAAE,CAAC,yDAAyD,CAAC,CAAC;AAC9D,IAAE,CAAC,wDAAwD,CAAC,CAAC;AAC7D,IAAE,CAAC,+DAA+D,CAAC,CAAC;AACpE,IAAE,CAAC,wDAAwD,CAAC,CAAC;AAC7D,IAAE,CAAC,kEAAkE,CAAC,CAAC;AACvE,IAAE,CAAC,wEAAwE,CAAC,CAAC;AAC7E,IAAE,CAAC,8BAA8B,CAAC,CAAC;AACnC,IAAE,CAAC,8BAA8B,CAAC,CAAC;AACnC,IAAE,CAAC,8BAA8B,CAAC,CAAC;AACnC,IAAE,CAAC,oFAAoF,CAAC,CAAC,CAC1F,CAAC,CAAC;;;AAEH,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACnC,MAAI,CAAC,GAAG,MAAM,CAAC;AACb,OAAG,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EACvC,CAAC,CAAC;;AACH,GAAC,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1B,SAAO,CAAC,CAAC,CACV","file":"relations-test.js","sourcesContent":["let _ = require('lodash');\nlet assert = require('chai').assert;\nlet unison = require('../lib');\nlet client = require('../lib').client;\nlet relations = require('../lib').relations;\nlet sinon = require('sinon');\n\ndescribe(\"Relations plugin\", () => {\n\n  it(\"should allow introducing and checking relations between objects from both sides\", () => {\n    let u = prepareUnisonInstance([\n      {AtoB: 'fatherOf', BtoA: 'childOf', A: 'father', Bs: 'children'}\n    ]);\n\n    let tom = u('tom'), jerry = u('jerry'), alice = u('alice'), bob = u('bob');\n\n    tom.relate('fatherOf', jerry);\n    alice.relate('childOf', bob);\n\n    assert.ok(tom.fatherOf(jerry));\n    assert.ok(jerry.childOf(tom));\n    assert.ok(bob.fatherOf(alice));\n    assert.ok(alice.childOf(bob));\n  });\n\n  it(\"should allow severing relations between objects\");\n  it(\"should allow getting one related object if there is one\");\n  it(\"should allow listing related objects if there are many\");\n  it(\"should throw when introducing a relation that's already there\");\n  it(\"should throw when severing a relation that's not there\");\n  it(\"should trigger update events on both sides when relations change\");\n  it(\"should send correct commands when relations are introduced and severed\");\n  it(\"should support 1:1 relations\");\n  it(\"should support 1:n relations\");\n  it(\"should support m:n relations\");\n  it(\"should automatically sever an old n:1 or 1:1 relation when a new '1' is introduced\");\n});\n\nfunction prepareUnisonInstance(rels) {\n  let u = unison({\n    tom: {}, jerry: {}, bob: {}, alice: {}\n  });\n  u.plugin(relations(rels));\n  return u;\n}\n"],"sourceRoot":"../../test"}