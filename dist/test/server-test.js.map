{"version":3,"sources":["server-test.js"],"names":[],"mappings":"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","file":"server-test.js","sourcesContent":["var assert = require('chai').assert;\r\nvar unison = require('../lib');\r\nvar server = require('../lib/plugins/server');\r\nvar CommunicationMock = require('./mocks/server-comm');\r\n\r\ndescribe(\"Unison network server\", () => {\r\n  it(\"should translate command methods into local changes and network messages to all clients\", () => {\r\n    let comm = new CommunicationMock();\r\n\r\n    let $$ = unison\r\n      .local({bird: {}})\r\n      .plugin(server({\r\n        communication: comm,\r\n        commands: {\r\n          frob(howHard) {\r\n            this.update({frobbed: howHard});\r\n          }\r\n        },\r\n        intents: {}\r\n      }));\r\n\r\n    comm.attach('client1');\r\n    comm.attach('client2');\r\n\r\n    $$('bird').frob('very hard');\r\n\r\n    assert.deepEqual($$('bird').state(), {frobbed: 'very hard'});\r\n    assert.ok(comm.containsMessageFor('client1',\r\n      ['c', 'frob', 'bird', ['very hard']]\r\n    ));\r\n    assert.ok(comm.containsMessageFor('client2',\r\n      ['c', 'frob', 'bird', ['very hard']]\r\n    ));\r\n  });\r\n\r\n  it(\"should translate intents from clients into command executions via the intent methods\", () => {\r\n    let comm = new CommunicationMock();\r\n\r\n    let $$ = unison\r\n      .local({bird: {}})\r\n      .plugin(server({\r\n        communication: comm,\r\n        commands: {\r\n          frob(howHard, by) {\r\n            this.update({frobbed: howHard, by: by});\r\n          }\r\n        },\r\n        intents: {\r\n          pleaseFrob(howHard, client) {\r\n            this.frob(howHard, client);\r\n          }\r\n        }\r\n      }));\r\n\r\n    comm.attach('client1');\r\n    comm.pushClientMessage('client1', ['i', 'pleaseFrob', 'bird', ['lightly']]);\r\n\r\n    let bird = $$('bird').state();\r\n    assert.equal(bird.frobbed, 'lightly');\r\n    assert.equal(bird.by, 'client1');\r\n\r\n    assert.ok(comm.containsMessageFor('client1',\r\n      ['c', 'frob', 'bird', ['lightly', 'client1']]\r\n    ), \"client should receive a command back\");\r\n  });\r\n\r\n  it(\"should not send commands to clients that have already detached\");\r\n  it(\"should send a 'seed' command to newly attached clients\");\r\n\r\n});\r\n"],"sourceRoot":"..\\..\\test"}