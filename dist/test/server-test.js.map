{"version":3,"sources":["server-test.js"],"names":[],"mappings":"aAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;AACtC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClC,IAAI,iBAAiB,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;;AAEvD,QAAQ,CAAC,eAAe,EAAE,YAAM;AAC9B,IAAE,CAAC,yFAAyF,EAAE,YAAM;AAClG,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAA;AAC1B,KAAC,CAAC,MAAM,CAAC;AACP,cAAQ,EAAE;AACR,YAAI,EAAA,cAAC,OAAO,EAAE;AACZ,cAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC,CACjC,EACF,EACF,CAAC,CAAC;;;;AACH,KAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;;AAExC,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,KAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;AAE5B,UAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAC,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;AACxD,UAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,KAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,WAAW,CAAC,CAAC,CACrC,CAAC,CAAC;;AACH,UAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,KAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,WAAW,CAAC,CAAC,CACrC,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,sFAAsF,EAAE,YAAM;AAC/F,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC;AACvB,UAAM,CAAC,MAAM,CAAC;AACb,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,YAAI,EAAA,cAAC,OAAO,EAAE,EAAE,EAAE;AAChB,cAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,CACzC,EACF;;;AACD,aAAO,EAAE;AACP,kBAAU,EAAA,oBAAC,OAAO,EAAE,MAAM,EAAE;AAC1B,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAC/B,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEN,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,QAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;AAE/E,QAAI,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC;AACzB,UAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AACtC,UAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;;AAEjC,UAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,KAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAC9C,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,qDAAqD,EAAE,YAAM;AAC9D,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,aAAa,GAAG,EAAE,CAAC;;AAEvB,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;AACf,UAAM,CAAC,MAAM,CAAC;AACb,mBAAa,EAAE,IAAI;AACnB,aAAO,EAAE;AACP,yBAAiB,EAAA,2BAAC,MAAM,EAAE;AACxB,gBAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACzD,uBAAa,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAC3C,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEN,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,AAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC/C,QAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACzE,QAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACzE,QAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;AAEzE,UAAM,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1C,UAAM,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAC3C,CAAC,CAAC;;;AAEH,IAAE,CAAC,kEAAkE,EAAE,YAAM;AAC3E,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAA;AAClB,KAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AACd,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,YAAI,EAAA,gBAAG;AACL,cAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;AAC7B,cAAI,CAAC,IAAI,EAAE,CAAC,CACb;;AACD,YAAI,EAAA,gBAAG;AACL,cAAI,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAC7B,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEJ,QAAI,KAAK,GAAG,EAAE,EAAE,MAAM,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAA;AACnF,KAAC,CAAC,GAAG,CAAC,MAAM,EAAE,UAAC,KAAK,EAAK;AACvB,OAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,UAAS,GAAG,EAAE;AAC1B,aAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CACtB,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,KAAC,EAAE,CAAC,IAAI,EAAE,CAAC;;AAEX,UAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CACrF,CAAC,CAAC;;;AAEH,IAAE,CAAC,6DAA6D,EAAE,YAAM;AACtE,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;AACf,UAAM,CAAC,MAAM,CAAC;AACb,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,YAAI,EAAA,gBAAG;AACL,cAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;AAC7B,cAAI,CAAC,IAAI,EAAE,CAAC,CACb;;AACD,YAAI,EAAA,gBAAG;AACL,cAAI,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAC7B,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEN,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,KAAC,EAAE,CAAC,IAAI,EAAE,CAAC;;AAEX,QAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACvD,UAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACjC,UAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AACrD,UAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAC9D,CAAC,CAAC;;;AAEH,IAAE,CAAC,gEAAgE,EAAE,YAAM;AACzE,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC;AACvB,UAAM,CAAC,MAAM,CAAC;AACb,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,YAAI,EAAA,cAAC,OAAO,EAAE;AACZ,cAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC,CACjC,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEN,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,KAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1B,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,KAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAEzB,QAAI,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE,EAAC,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC;AACxE,UAAM,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACrC,UAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CACvE,CAAC,CAAC;;;AAEH,IAAE,CAAC,gFAAgF,EAAE,YAAM;AACzF,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,IAAI,EAAE,EAAC,QAAQ,EAAE,CAAC,EAAC,EAAC,CAAC;AAClC,UAAM,CAAC,MAAM,CAAC;AACb,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,YAAI,EAAA,cAAC,OAAO,EAAE;AACZ,cAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC,CACjC,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEN,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,QAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AAC9C,UAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;AACzB,KAAC,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,EAAC,IAAI,EAAE,EAAC,QAAQ,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC,CAC5C,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,sEAAsE,EAAE,YAAM;AAC/E,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,CAAC,GAAG,MAAM,CAAC;AACb,YAAM,EAAE,EAAE;AACV,WAAK,EAAE,EAAC,MAAM,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,EAAC,EAC7C,CAAC,CAAC;;AACH,KAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;;AAExC,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,QAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AAC9C,UAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;AACzB,KAAC,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,EAAC,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC,CACnC,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,yDAAyD,EAAE,YAAM;AAClE,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC;AACvB,UAAM,CAAC,MAAM,CAAC,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;;AAEzC,KAAC,CAAC,SAAS,CAAC,YAAY,EAAE,YAAW,CAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAE,CAAC,CAAC;AACvD,KAAC,CAAC,UAAU,CAAC,MAAM,EAAE,YAAW,CAAE,IAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,CAAE,CAAC,CAAC;;AAEnE,KAAC,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;;AAEvB,UAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAClC,CAAC,CAAC;;;AAEH,IAAE,CAAC,qEAAqE,EAAE,YAAM;AAC9E,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;AAClC,UAAM,CAAC,MAAM,CAAC;AACb,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,YAAI,EAAA,cAAC,GAAG,EAAE,CAAE,GAAG,CAAC,MAAM,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,EAAC,CAAC,CAAC,CAAE,EACpD;;AACD,aAAO,EAAE;AACP,kBAAU,EAAA,oBAAC,GAAG,EAAE;AACd,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAChB,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEN,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,QAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,EAAC,EAAE,EAAE,OAAO,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;AAEnF,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC/C,UAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,KAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAC,EAAE,EAAE,OAAO,EAAC,CAAC,CAAC,CACvC,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,uEAAuE,EAAE,UAAC,IAAI,EAAK;AACpF,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,GAAG,GAAG,MAAM,CAAC;AACf,mBAAa,EAAE,IAAI;AACnB,aAAO,EAAE;AACP,kBAAU,EAAA,sBAAG;AACX,iBAAO,UAAU,CAAC,CACnB,EACF,EACF,CAAC,CAAC;;;;AACH,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,KAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AACjF,YAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,OAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,UAAU,CAAC,CAC3B,CAAC,CAAC,CACJ,CAAC;;AAAC,QAAI,CAAC,IAAI,CAAC,SAAM,CAAC,IAAI,CAAC,CAAC,CAC3B,CAAC,CAAC;;;AAEH,IAAE,CAAC,gEAAgE,EAAE,UAAC,IAAI,EAAK;AAC7E,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,GAAG,GAAG,MAAM,CAAC;AACf,mBAAa,EAAE,IAAI;AACnB,aAAO,EAAE;AACP,kBAAU,EAAA,sBAAG;AACX,iBAAO,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAM,UAAU,EAAA,CAAC,CAAC,CACxC,EACF,EACF,CAAC,CAAC;;;;AACH,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,KAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AACjF,YAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,OAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,UAAU,CAAC,CAC3B,CAAC,CAAC,CACJ,CAAC;;AAAC,QAAI,CAAC,IAAI,CAAC,SAAM,CAAC,IAAI,CAAC,CAAC,CAC3B,CAAC,CAAC;;;AAEH,IAAE,CAAC,0EAA0E,EAAE,UAAC,IAAI,EAAK;AACvF,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;;AAE3D,QAAI,GAAG,GAAG,MAAM,CAAC;AACf,mBAAa,EAAE,IAAI;AACnB,aAAO,EAAE;AACP,kBAAU,EAAA,sBAAG;AACX,gBAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA,CACnC,EACF;;;AACD,4BAAsB,EAAE,OAAO;AAC/B,kBAAY,EAAE,QAAQ,EACvB,CAAC,CAAC;;;AAEH,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,KAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AACjF,YAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,OAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CACzB,CAAC,CAAC;;AACH,YAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAChC,CAAC;AAAC,QAAI,CAAC,IAAI,CAAC,SAAM,CAAC,IAAI,CAAC,CAAC,CAE3B,CAAC,CAAC;;;;AAEH,IAAE,CAAC,0EAA0E,EAAE,UAAC,IAAI,EAAK;AACvF,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AAC3D,QAAI,GAAG,GAAG,MAAM,CAAC;AACf,mBAAa,EAAE,IAAI;AACnB,aAAO,EAAE;AACP,kBAAU,EAAA,sBAAG;AACX,gBAAM,IAAI,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAA,CAC7C,EACF;;;AACD,kBAAY,EAAE,QAAQ,EACvB,CAAC,CAAC;;;AAEH,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,KAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AACjF,YAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,OAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAClC,CAAC,CAAC;;AACH,YAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAC7B,CAAC;AAAC,QAAI,CAAC,IAAI,CAAC,SAAM,CAAC,IAAI,CAAC,CAAC,CAC3B,CAAC,CAAC;;;AAEH,IAAE,CAAC,gDAAgD,EAAE,UAAC,IAAI,EAAK;AAC7D,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;;AAEnC,QAAI,GAAG,GAAG,MAAM,CAAC;AACf,mBAAa,EAAE,IAAI;AACnB,aAAO,EAAE;AACP,kBAAU,EAAA,sBAAG;AACX,iBAAO,IAAI,CAAC,CACb,EACF,EACF,CAAC,CAAC;;;;AACH,QAAI,CAAC,GAAG,MAAM,CAAC,EAAC,QAAQ,EAAE,EAAE,EAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3C,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;AAEvB,KAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AACzF,YAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,OAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,EAAC,EAAE,EAAE,UAAU,EAAC,CAAC,CACjC,CAAC,CAAC,CACJ,CAAC;;AAAC,QAAI,CAAC,IAAI,CAAC,SAAM,CAAC,IAAI,CAAC,CAAC,CAC3B,CAAC,CAAC;;;AAEH,IAAE,CAAC,sDAAsD,EAAE,YAAM;AAC/D,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;;AAEzD,UAAM,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CACzB,CAAC,CAAC;;;AAEH,IAAE,CAAC,gFAAgF,EAAE,YAAM;AACzF,QAAI,IAAI,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACnC,QAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AAC/B,mBAAa,EAAE,IAAI;AACnB,cAAQ,EAAE;AACR,yBAAiB,EAAA,6BAAG;AAClB,cAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;AACf,WAAC,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,YAAY,GAAG,SAAS,CAAC,CAC9D,EACF,EACF,CAAC,CAAC,CAAC;;;;;AAEJ,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvB,KAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC;;AAExB,UAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS;AACzC,KAAC,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAC9D,CAAC,CAAC,CACJ,CAAC,CAAC,CAEJ,CAAC,CAAC;;;;;;AAEH,SAAS,IAAI,CAAC,EAAE,EAAE;AAChB,SAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AAC9B,cAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CACzB,CAAC,CAAC,CACJ","file":"server-test.js","sourcesContent":["var _ = require('lodash');\nvar assert = require('chai').assert;\nvar unison = require('../lib');\nvar server = require('../lib').server;\nvar sinon = require('sinon');\nvar Promise = require('bluebird');\nvar CommunicationMock = require('./mocks/server-comm');\n\ndescribe(\"Server plugin\", () => {\n  it(\"should translate command methods into local changes and network messages to all clients\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n    u.define({\n      commands: {\n        frob(howHard) {\n          this.update({frobbed: howHard});\n        }\n      }\n    });\n    u.plugin(server({communication: comm}));\n\n    comm.attach('client1');\n    comm.attach('client2');\n\n    u('bird').frob('very hard');\n\n    assert.deepEqual(u('bird').get, {frobbed: 'very hard'});\n    assert.ok(comm.containsMessageFor('client1',\n      ['c', 'frob', 'bird', ['very hard']]\n    ));\n    assert.ok(comm.containsMessageFor('client2',\n      ['c', 'frob', 'bird', ['very hard']]\n    ));\n  });\n\n  it(\"should translate intents from clients into command executions via the intent methods\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard, by) {\n            this.update({frobbed: howHard, by: by});\n          }\n        },\n        intents: {\n          pleaseFrob(howHard, client) {\n            this.frob(howHard, client.id);\n          }\n        }\n      }));\n\n    comm.attach('client1');\n    comm.pushClientMessage('client1', ['i', 'pleaseFrob', 'bird', ['lightly'], 1]);\n\n    let bird = u('bird').get;\n    assert.equal(bird.frobbed, 'lightly');\n    assert.equal(bird.by, 'client1');\n\n    assert.ok(comm.containsMessageFor('client1',\n      ['c', 'frob', 'bird', ['lightly', 'client1']]\n    ));\n  });\n\n  it(\"should let intents store data on the client objects\", () => {\n    let comm = new CommunicationMock();\n\n    let counterValues = {};\n\n    let u = unison({})\n      .plugin(server({\n        communication: comm,\n        intents: {\n          pleaseBumpCounter(client) {\n            client.counter = client.counter ? client.counter + 1 : 1;\n            counterValues[client.id] = client.counter;\n          }\n        }\n      }));\n\n    comm.attach('client1'); comm.attach('client2');\n    comm.pushClientMessage('client1', ['i', 'pleaseBumpCounter', '', [], 1]);\n    comm.pushClientMessage('client2', ['i', 'pleaseBumpCounter', '', [], 2]);\n    comm.pushClientMessage('client1', ['i', 'pleaseBumpCounter', '', [], 3]);\n\n    assert.equal(counterValues['client1'], 2);\n    assert.equal(counterValues['client2'], 1);\n  });\n\n  it(\"should trigger before:X/after:X events on all command executions\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({})\n    u.plugin(server({\n      communication: comm,\n      commands: {\n        frob() {\n          this.update({frobbed: true});\n          this.futz();\n        },\n        futz() {\n          this.update({futzed: true});\n        }\n      }\n    }));\n\n    let calls = [], events = ['before:frob', 'after:frob', 'before:futz', 'after:futz']\n    _.map(events, (event) => {\n      u().on(event, function(evt) {\n        calls.push(evt.name);\n      });\n    });\n\n    u().frob();\n\n    assert.deepEqual(calls, ['before:frob', 'before:futz', 'after:futz', 'after:frob']);\n  });\n\n  it(\"should not send commands nested in other command executions\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob() {\n            this.update({frobbed: true});\n            this.futz();\n          },\n          futz() {\n            this.update({futzed: true});\n          }\n        }\n      }));\n\n    comm.attach('client1');\n    u().frob();\n\n    let messages = comm.messagesSentTo('client1').slice(1); // remove the _seed command\n    assert.equal(messages.length, 1);\n    assert.deepEqual(messages[0], ['c', 'frob', '', []]);\n    assert.deepEqual(u().state(), {frobbed: true, futzed: true});\n  });\n\n  it(\"should not send commands to clients that have already detached\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard) {\n            this.update({frobbed: howHard});\n          }\n        }\n      }));\n\n    comm.attach('client1');\n    u('bird').frob('lightly');\n    comm.detach('client1');\n    u('bird').frob('gently');\n\n    var frobMessages = _.where(comm.messagesSentTo('client1'), {1: 'frob'});\n    assert.equal(frobMessages.length, 1);\n    assert.deepEqual(frobMessages[0], ['c', 'frob', 'bird', ['lightly']]);\n  });\n\n  it(\"should send a '_seed' command with the current state to newly attached clients\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {wingspan: 6}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard) {\n            this.update({frobbed: howHard});\n          }\n        }\n      }));\n\n    comm.attach('client1');\n\n    var messages = comm.messagesSentTo('client1');\n    assert.deepEqual(messages, [\n      ['c', '_seed', '', [{bird: {wingspan: 6}}]]\n    ]);\n  });\n\n  it(\"should not propagate state under 'local' through the '_seed' command\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({\n      answer: 42,\n      local: {should: ['not', 'be', 'propagated']}\n    });\n    u.plugin(server({communication: comm}));\n\n    comm.attach('client1');\n\n    var messages = comm.messagesSentTo('client1');\n    assert.deepEqual(messages, [\n      ['c', '_seed', '', [{answer: 42}]]\n    ]);\n  });\n\n  it(\"should allow adding commands and intents after the fact\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}})\n      .plugin(server({communication: comm}));\n\n    u.addIntent('pleaseFrob', function() { this.frob(); });\n    u.addCommand('frob', function() { this.update({frobbed: true}); });\n\n    u('bird').pleaseFrob();\n\n    assert.ok(u('bird').get.frobbed);\n  });\n\n  it(\"should serialize and deserialize objects over the network correctly\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}, human: {}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(who) { who.update({frobbedBy: this.path()}); }\n        },\n        intents: {\n          pleaseFrob(who) {\n            this.frob(who);\n          }\n        }\n      }));\n\n    comm.attach('client1');\n    comm.pushClientMessage('client1', ['i', 'pleaseFrob', 'bird', [{_u: 'human'}], 1]);\n\n    assert.equal(u('human').get.frobbedBy, 'bird');\n    assert.ok(comm.containsMessageFor('client1',\n      ['c', 'frob', 'bird', [{_u: 'human'}]]\n    ));\n  });\n\n  it(\"should send correct responses when an intent function returns a value\", (done) => {\n    let comm = new CommunicationMock();\n\n    let srv = server({\n      communication: comm,\n      intents: {\n        pleaseFrob() {\n          return \"Frobbed!\";\n        }\n      }\n    });\n    let u = unison({}).plugin(srv);\n    comm.attach('client1');\n\n    u.plugins.server.applyIntent('client1', ['i', 'pleaseFrob', '', [], 1]).then(() => {\n      assert.ok(comm.containsMessageFor('client1',\n        ['r', 'ok', 1, \"Frobbed!\"]\n      ));\n    }).then(done).catch(done);\n  });\n\n  it(\"should act correctly when an intent function returns a promise\", (done) => {\n    let comm = new CommunicationMock();\n\n    let srv = server({\n      communication: comm,\n      intents: {\n        pleaseFrob() {\n          return wait(10).then(() => \"Frobbed!\");\n        }\n      }\n    });\n    let u = unison({}).plugin(srv);\n    comm.attach('client1');\n\n    u.plugins.server.applyIntent('client1', ['i', 'pleaseFrob', '', [], 1]).then(() => {\n      assert.ok(comm.containsMessageFor('client1',\n        ['r', 'ok', 1, \"Frobbed!\"]\n      ));\n    }).then(done).catch(done);\n  });\n\n  it(\"should send correct responses when an intent function unexpectedly fails\", (done) => {\n    let comm = new CommunicationMock(), errorSpy = sinon.spy();\n\n    let srv = server({\n      communication: comm,\n      intents: {\n        pleaseFrob() {\n          throw new Error(\"It hurts a lot.\")\n        }\n      },\n      unexpectedErrorMessage: 'Argh!',\n      errorHandler: errorSpy\n    });\n\n    let u = unison({}).plugin(srv);\n    comm.attach('client1');\n\n    u.plugins.server.applyIntent('client1', ['i', 'pleaseFrob', '', [], 1]).then(() => {\n      assert.ok(comm.containsMessageFor('client1',\n        ['r', 'err', 1, \"Argh!\"]\n      ));\n      assert.ok(errorSpy.calledOnce);\n    }).then(done).catch(done);\n\n  });\n\n  it(\"should send correct responses when an intent function throws a UserError\", (done) => {\n    let comm = new CommunicationMock(), errorSpy = sinon.spy();\n    let srv = server({\n      communication: comm,\n      intents: {\n        pleaseFrob() {\n          throw new unison.UserError(\"Not frobbable.\")\n        }\n      },\n      errorHandler: errorSpy\n    });\n\n    let u = unison({}).plugin(srv);\n    comm.attach('client1');\n\n    u.plugins.server.applyIntent('client1', ['i', 'pleaseFrob', '', [], 1]).then(() => {\n      assert.ok(comm.containsMessageFor('client1',\n        ['r', 'err', 1, \"Not frobbable.\"]\n      ));\n      assert.ok(!errorSpy.called);\n    }).then(done).catch(done);\n  });\n\n  it(\"should serialize objects returned from intents\", (done) => {\n    let comm = new CommunicationMock();\n\n    let srv = server({\n      communication: comm,\n      intents: {\n        pleaseFrob() {\n          return this;\n        }\n      }\n    });\n    let u = unison({cockatoo: {}}).plugin(srv);\n    comm.attach('client1');\n\n    u.plugins.server.applyIntent('client1', ['i', 'pleaseFrob', 'cockatoo', [], 1]).then(() => {\n      assert.ok(comm.containsMessageFor('client1',\n        ['r', 'ok', 1, {_u: 'cockatoo'}]\n      ));\n    }).then(done).catch(done);\n  });\n\n  it(\"should let us recognize that we're on the serverside\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({}).plugin(server({communication: comm}));\n\n    assert.ok(u.serverSide);\n  });\n\n  it(\"should allow extra information to be sent along with commands by other plugins\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({}).plugin(server({\n      communication: comm,\n      commands: {\n        applySpecialSauce() {\n          let u = this.u;\n          u.plugins.server.getCommandExtras().specialSauce = 'applied';\n        }\n      }\n    }));\n\n    comm.attach('client1');\n    u().applySpecialSauce();\n\n    assert.ok(comm.containsMessageFor('client1',\n      ['c', 'applySpecialSauce', '', [], {specialSauce: 'applied'}]\n    ));\n  });\n\n});\n\nfunction wait(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}"],"sourceRoot":"../../test"}