{"version":3,"sources":["server-test.js"],"names":[],"mappings":"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","file":"server-test.js","sourcesContent":["var _ = require('lodash');\nvar assert = require('chai').assert;\nvar unison = require('../lib');\nvar server = require('../lib').server;\nvar CommunicationMock = require('./mocks/server-comm');\n\ndescribe(\"Server plugin\", () => {\n  it(\"should translate command methods into local changes and network messages to all clients\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard) {\n            this.update({frobbed: howHard});\n          }\n        },\n        intents: {}\n      }));\n\n    comm.attach('client1');\n    comm.attach('client2');\n\n    u('bird').frob('very hard');\n\n    assert.deepEqual(u('bird').get, {frobbed: 'very hard'});\n    assert.ok(comm.containsMessageFor('client1',\n      ['c', 'frob', 'bird', ['very hard']]\n    ));\n    assert.ok(comm.containsMessageFor('client2',\n      ['c', 'frob', 'bird', ['very hard']]\n    ));\n  });\n\n  it(\"should translate intents from clients into command executions via the intent methods\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard, by) {\n            this.update({frobbed: howHard, by: by});\n          }\n        },\n        intents: {\n          pleaseFrob(howHard, client) {\n            this.frob(howHard, client);\n          }\n        }\n      }));\n\n    comm.attach('client1');\n    comm.pushClientMessage('client1', ['i', 'pleaseFrob', 'bird', ['lightly']]);\n\n    let bird = u('bird').get;\n    assert.equal(bird.frobbed, 'lightly');\n    assert.equal(bird.by, 'client1');\n\n    assert.ok(comm.containsMessageFor('client1',\n      ['c', 'frob', 'bird', ['lightly', 'client1']]\n    ));\n  });\n\n  it(\"should not send commands to clients that have already detached\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard) {\n            this.update({frobbed: howHard});\n          }\n        }\n      }));\n\n    comm.attach('client1');\n    u('bird').frob('lightly');\n    comm.detach('client1');\n    u('bird').frob('gently');\n\n    var frobMessages = _.where(comm.messagesSentTo('client1'), {1: 'frob'});\n    assert.equal(frobMessages.length, 1);\n    assert.deepEqual(frobMessages[0], ['c', 'frob', 'bird', ['lightly']]);\n  });\n\n  it(\"should send a '_seed' command with the current state to newly attached clients\", () => {\n    let comm = new CommunicationMock();\n\n    let u = unison({bird: {wingspan: 6}})\n      .plugin(server({\n        communication: comm,\n        commands: {\n          frob(howHard) {\n            this.update({frobbed: howHard});\n          }\n        }\n      }));\n\n    comm.attach('client1');\n\n    var messages = comm.messagesSentTo('client1');\n    assert.deepEqual(messages, [\n      ['c', '_seed', '', [{bird: {wingspan: 6}}]]\n    ]);\n  });\n\n  it(\"should allow adding commands and intents after the fact\", () => {\n    let comm = new CommunicationMock();\n    let u = unison({bird: {}})\n      .plugin(server({communication: comm}));\n\n    u.addIntent('pleaseFrob', function() { this.frob(); });\n    u.addCommand('frob', function() { this.update({frobbed: true}); });\n\n    u('bird').pleaseFrob();\n\n    assert.ok(u('bird').get.frobbed);\n  });\n\n  it(\"should deserialize objects in received intents correctly\");\n  it(\"should serialize objects in sent command arguments\");\n});\n"],"sourceRoot":"../../test"}