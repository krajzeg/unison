{"version":3,"sources":["basic-updates-test.js"],"names":[],"mappings":"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","file":"basic-updates-test.js","sourcesContent":["var assert = require('chai').assert;\nvar unison = require('../lib');\n\ndescribe(\"update()\", () => {\n  var u;\n  beforeEach(() => {\n    u = unison({\n      bird: {\n        name: 'eagle'\n      }\n    });\n  });\n\n  it(\"should allow adding new properties\", () => {\n    u('bird').update({wingspan: 150});\n    assert.deepEqual(u('bird').state(), {\n      name: 'eagle', wingspan: 150\n    });\n  });\n\n  it(\"should allow changing existing properties\", () => {\n    u('bird').update({name: 'sparrow'});\n    assert.deepEqual(u('bird').state(), {\n      name: 'sparrow'\n    });\n  });\n\n  it(\"should allow changing multiple properties at a time\", () => {\n    u('bird').update({name: 'swallow', wingspan: 42});\n    assert.deepEqual(u('bird').state(), {\n      name: 'swallow', wingspan: 42\n    });\n  });\n\n  it(\"should do nothing for non-existent nodes\", () => {\n    u('bogus').update({some: 'properties'});\n    assert.strictEqual(u('bogus').state(), undefined);\n  });\n});\n\ndescribe(\"add()\", () => {\n  var u;\n  beforeEach(() => {\n    u = unison({\n      things: {\n        screwdriver: {name: \"screwdriver\"}\n      }\n    });\n  });\n\n  it(\"should automatically assign IDs to children and return their path\", () => {\n    var hairdryerPath = u('things').add({name: 'hairdryer'});\n    var lemonPath = u('things').add({name: 'lemon'});\n\n    assert.ok(hairdryerPath && lemonPath);\n\n    assert.ok(/^things\\./.test(hairdryerPath));\n    assert.ok(/^things\\./.test(lemonPath));\n\n    assert.equal(u(hairdryerPath).state().name, 'hairdryer');\n    assert.equal(u(lemonPath).state().name, 'lemon');\n  });\n\n  it(\"should respect manually chosen IDs if provided\", () => {\n    var hairdryerPath = u('things').add('hairdryer', {name: 'hairdryer'});\n\n    assert.equal(hairdryerPath, 'things.hairdryer');\n    assert.equal(u(hairdryerPath).state().name, 'hairdryer');\n  });\n\n  it(\"should throw and leave things unchanged if you add a child that exists already\", () => {\n    assert.throws(() => {\n      u('things').add('screwdriver', {name: 'duplicate'});\n    });\n    assert.deepEqual(u('things.screwdriver').state(), {name: 'screwdriver'});\n  });\n\n  it(\"should throw on non-existent nodes\", () => {\n    assert.throws(() => {\n      u('bogus').add({something: 'here'});\n    });\n  });\n\n  it(\"should throw when adding to a non-object\", () => {\n    assert.throws(() => {\n      u('things.screwdriver.name').add({something: 'here'});\n    });\n  });\n});\n\ndescribe(\"remove()\", () => {\n  var u;\n  beforeEach(() => {\n    u = unison({\n      things: {\n        screwdriver: {name: \"screwdriver\"},\n        lemon: {name: 'lemon'}\n      }\n    });\n  });\n\n  it(\"should remove existing children and return true\", () => {\n    let removed = u('things').remove('screwdriver');\n    assert.strictEqual(removed, true);\n    assert.strictEqual(u('things.screwdriver').state(), undefined);\n    assert.deepEqual(u('things').state(), {\n      lemon: {name: 'lemon'}\n    });\n  });\n\n  it(\"should return false if we attempt to remove a non-existent child\", () => {\n    let removed = u('things').remove('leafblower');\n    assert.strictEqual(removed, false);\n  });\n\n  it(\"should throw on non-existent nodes\", () => {\n    assert.throws(() => {\n      u('bogus').remove('makes-no-sense');\n    });\n  });\n\n  it(\"should throw when removing from non-objects\", () => {\n    assert.throws(() => {\n      u('things.screwdriver.name').remove('makes-no-sense');\n    });\n  });\n});\n\ndescribe(\"destroy()\", () => {\n  var u;\n  beforeEach(() => {\n    u = unison({\n      things: {\n        screwdriver: {name: \"screwdriver\"},\n        lemon: {name: 'lemon'}\n      }\n    });\n  });\n\n  it(\"should remove the object from its parent and return true\", () => {\n    u('things.screwdriver').destroy();\n\n    assert.strictEqual(u('things.screwdriver').state(), undefined);\n    assert.deepEqual(u('things').state(), {\n      lemon: {name: 'lemon'}\n    });\n  });\n\n  it(\"should throw for non-existent nodes\", () => {\n    assert.throws(() => {\n      u('things.bogus').destroy();\n    });\n  });\n});\n"],"sourceRoot":"../../test"}