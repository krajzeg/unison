{"version":3,"sources":["basic-updates-test.js"],"names":[],"mappings":"aAAA,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,QAAQ,CAAC,UAAU,EAAE,YAAM;AACzB,MAAI,EAAE,CAAC;AACP,YAAU,CAAC,YAAM;AACf,MAAE,GAAG,MAAM,CAAC,KAAK,CAAC;AAChB,UAAI,EAAE;AACJ,YAAI,EAAE,OAAO,EACd,EACF,CAAC,CAAC,CACJ,CAAC,CAAC;;;;;AAEH,IAAE,CAAC,oCAAoC,EAAE,YAAM;AAC7C,MAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,GAAG,EAAC,CAAC,CAAC;AACnC,UAAM,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;AACnC,UAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAC7B,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,2CAA2C,EAAE,YAAM;AACpD,MAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;AACrC,UAAM,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;AACnC,UAAI,EAAE,SAAS,EAChB,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,qDAAqD,EAAE,YAAM;AAC9D,MAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC,CAAC;AACnD,UAAM,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;AACnC,UAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAC9B,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,IAAE,CAAC,0CAA0C,EAAE,YAAM;AACnD,MAAE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC,CAAC;AACzC,UAAM,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,SAAS,CAAC,CAAC,CACpD,CAAC,CAAC,CACJ,CAAC,CAAC","file":"basic-updates-test.js","sourcesContent":["var assert = require('chai').assert;\nvar unison = require('../lib');\n\ndescribe(\"update()\", () => {\n  var $$;\n  beforeEach(() => {\n    $$ = unison.local({\n      bird: {\n        name: 'eagle'\n      }\n    });\n  });\n\n  it(\"should allow adding new properties\", () => {\n    $$('bird').update({wingspan: 150});\n    assert.deepEqual($$('bird').state(), {\n      name: 'eagle', wingspan: 150\n    });\n  });\n\n  it(\"should allow changing existing properties\", () => {\n    $$('bird').update({name: 'sparrow'});\n    assert.deepEqual($$('bird').state(), {\n      name: 'sparrow'\n    });\n  });\n\n  it(\"should allow changing multiple properties at a time\", () => {\n    $$('bird').update({name: 'swallow', wingspan: 42});\n    assert.deepEqual($$('bird').state(), {\n      name: 'swallow', wingspan: 42\n    });\n  });\n\n  it(\"should do nothing for non-existent nodes\", () => {\n    $$('bogus').update({some: 'properties'});\n    assert.strictEqual($$('bogus').state(), undefined);\n  });\n});\n"],"sourceRoot":"../../test"}