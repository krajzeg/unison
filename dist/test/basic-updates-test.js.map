{"version":3,"sources":["basic-updates-test.js"],"names":[],"mappings":"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","file":"basic-updates-test.js","sourcesContent":["var assert = require('chai').assert;\r\nvar unison = require('../lib');\r\n\r\ndescribe(\"update()\", () => {\r\n  var $$;\r\n  beforeEach(() => {\r\n    $$ = unison.local({\r\n      bird: {\r\n        name: 'eagle'\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should allow adding new properties\", () => {\r\n    $$('bird').update({wingspan: 150});\r\n    assert.deepEqual($$('bird').state(), {\r\n      name: 'eagle', wingspan: 150\r\n    });\r\n  });\r\n\r\n  it(\"should allow changing existing properties\", () => {\r\n    $$('bird').update({name: 'sparrow'});\r\n    assert.deepEqual($$('bird').state(), {\r\n      name: 'sparrow'\r\n    });\r\n  });\r\n\r\n  it(\"should allow changing multiple properties at a time\", () => {\r\n    $$('bird').update({name: 'swallow', wingspan: 42});\r\n    assert.deepEqual($$('bird').state(), {\r\n      name: 'swallow', wingspan: 42\r\n    });\r\n  });\r\n\r\n  it(\"should do nothing for non-existent nodes\", () => {\r\n    $$('bogus').update({some: 'properties'});\r\n    assert.strictEqual($$('bogus').state(), undefined);\r\n  });\r\n});\r\n\r\ndescribe(\"add()\", () => {\r\n  var $$;\r\n  beforeEach(() => {\r\n    $$ = unison.local({\r\n      things: {\r\n        screwdriver: {name: \"screwdriver\"}\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should automatically assign IDs to children and return their path\", () => {\r\n    var hairdryerPath = $$('things').add({name: 'hairdryer'});\r\n    var lemonPath = $$('things').add({name: 'lemon'});\r\n\r\n    assert.ok(hairdryerPath && lemonPath);\r\n\r\n    assert.ok(/^things\\./.test(hairdryerPath));\r\n    assert.ok(/^things\\./.test(lemonPath));\r\n\r\n    assert.equal($$(hairdryerPath).state().name, 'hairdryer');\r\n    assert.equal($$(lemonPath).state().name, 'lemon');\r\n  });\r\n\r\n  it(\"should respect manually chosen IDs if provided\", () => {\r\n    var hairdryerPath = $$('things').add('hairdryer', {name: 'hairdryer'});\r\n\r\n    assert.equal(hairdryerPath, 'things.hairdryer');\r\n    assert.equal($$(hairdryerPath).state().name, 'hairdryer');\r\n  });\r\n\r\n  it(\"should throw and leave things unchanged if you add a child that exists already\", () => {\r\n    assert.throws(() => {\r\n      $$('things').add('screwdriver', {name: 'duplicate'});\r\n    });\r\n    assert.deepEqual($$('things.screwdriver').state(), {name: 'screwdriver'});\r\n  });\r\n\r\n  it(\"should throw on non-existent nodes\", () => {\r\n    assert.throws(() => {\r\n      $$('bogus').add({something: 'here'});\r\n    });\r\n  });\r\n\r\n  it(\"should throw when adding to a non-object\", () => {\r\n    assert.throws(() => {\r\n      $$('things.screwdriver.name').add({something: 'here'});\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"remove()\", () => {\r\n  var $$;\r\n  beforeEach(() => {\r\n    $$ = unison.local({\r\n      things: {\r\n        screwdriver: {name: \"screwdriver\"},\r\n        lemon: {name: 'lemon'}\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should remove existing children and return true\", () => {\r\n    let removed = $$('things').remove('screwdriver');\r\n    assert.strictEqual(removed, true);\r\n    assert.strictEqual($$('things.screwdriver').state(), undefined);\r\n    assert.deepEqual($$('things').state(), {\r\n      lemon: {name: 'lemon'}\r\n    });\r\n  });\r\n\r\n  it(\"should return false if we attempt to remove a non-existent child\", () => {\r\n    let removed = $$('things').remove('leafblower');\r\n    assert.strictEqual(removed, false);\r\n  });\r\n\r\n  it(\"should throw on non-existent nodes\", () => {\r\n    assert.throws(() => {\r\n      $$('bogus').remove('makes-no-sense');\r\n    });\r\n  });\r\n\r\n  it(\"should throw when removing from non-objects\", () => {\r\n    assert.throws(() => {\r\n      $$('things.screwdriver.name').remove('makes-no-sense');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"destroy()\", () => {\r\n  var $$;\r\n  beforeEach(() => {\r\n    $$ = unison.local({\r\n      things: {\r\n        screwdriver: {name: \"screwdriver\"},\r\n        lemon: {name: 'lemon'}\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should remove the object from its parent and return true\", () => {\r\n    $$('things.screwdriver').destroy();\r\n\r\n    assert.strictEqual($$('things.screwdriver').state(), undefined);\r\n    assert.deepEqual($$('things').state(), {\r\n      lemon: {name: 'lemon'}\r\n    });\r\n  });\r\n\r\n  it(\"should throw for non-existent nodes\", () => {\r\n    assert.throws(() => {\r\n      $$('things.bogus').destroy();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"../../test"}