{"version":3,"sources":["views-test.js"],"names":[],"mappings":"aAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;AACpC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE7B,QAAQ,CAAC,cAAc,EAAE,YAAM;AAC7B,MAAI,CAAC,YAAA,CAAC;AACN,YAAU,CAAC,YAAM;AACf,KAAC,GAAG,MAAM,CAAC,EAAC,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CACzC,CAAC,CAAC;;;AAEH,UAAQ,CAAC,SAAS,EAAE,YAAM;AACxB,MAAE,CAAC,2DAA2D,EAAE,YAAM;AACpE,UAAI,KAAK,GAAG,EAAC,OAAO,EAAE,KAAK,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC;AAC3D,OAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAExB,OAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AACjC,OAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;;AAErB,YAAM,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,YAAM,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CACvC,CAAC,CAAC;;;AAEH,MAAE,CAAC,sEAAsE,EAAE,YAAM;AAC/E,UAAI,KAAK,GAAG,EAAC,OAAO,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC;;AAEnC,OAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACxB,OAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;;AAErB,OAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACvB,OAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;;AAE1C,YAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAClC,CAAC,CAAC,CACJ,CAAC,CAAC;;;;AAEH,UAAQ,CAAC,QAAQ,EAAE,YAAM;AACvB,MAAE,CAAC,oEAAoE,EAAE,YAAM;AAC7E,UAAI,CAAC,GAAG,EAAE,CAAC;AACX,OAAC,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC3B,YAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CACpC,CAAC,CAAC;;;AAEH,MAAE,CAAC,uDAAuD,EAAE,YAAM;AAChE,UAAI,CAAC,GAAG,EAAE,CAAC;AACX,OAAC,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC3B,OAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;AACrB,YAAM,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,SAAS,CAAC,CAAC,CAClD,CAAC,CAAC,CACJ,CAAC,CAAC,CAEJ,CAAC,CAAC","file":"views-test.js","sourcesContent":["let _ = require('lodash');\nlet assert = require('chai').assert;\nlet unison = require('../lib');\nlet views = require('../lib').views;\nlet sinon = require('sinon');\n\ndescribe(\"Views plugin\", () => {\n  let u;\n  beforeEach(() => {\n    u = unison({stuff: {}}).plugin(views());\n  });\n\n  describe(\"watch()\", () => {\n    it(\"should bind all methods matching event names as listeners\", () => {\n      let spies = {updated: sinon.spy(), destroyed: sinon.spy()};\n      u('stuff').watch(spies);\n\n      u('stuff').update({heavy: true});\n      u('stuff').destroy();\n\n      assert.ok(spies.updated.calledOnce);\n      assert.ok(spies.destroyed.calledOnce);\n    });\n\n    it(\"should automatically unbind all listeners when the node is destroyed\", () => {\n      let spies = {updated: sinon.spy()};\n\n      u('stuff').watch(spies);\n      u('stuff').destroy();\n\n      u('').add('stuff', {});\n      u('stuff').update({ignored: \"very much\"});\n\n      assert.ok(!spies.updated.called);\n    });\n  });\n\n  describe(\"view()\", () => {\n    it(\"should let you find views registered earlier with registerObject()\", () => {\n      let v = {};\n      u('stuff').registerView(v);\n      assert.equal(u('stuff').view(), v);\n    });\n\n    it(\"should not find the view after the node was destroyed\", () => {\n      let v = {};\n      u('stuff').registerView(v);\n      u('stuff').destroy();\n      assert.strictEqual(u('stuff').view(), undefined);\n    });\n  });\n\n});"],"sourceRoot":"../../test"}