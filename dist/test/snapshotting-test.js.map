{"version":3,"sources":["snapshotting-test.js"],"names":[],"mappings":"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","file":"snapshotting-test.js","sourcesContent":["let _ = require('lodash');\nlet assert = require('chai').assert;\nlet unison = require('../lib');\n\ndescribe(\"Snapshot nodes\", () => {\n  it(\"should access state corresponding to their timestamp\", () => {\n    let u = unison({ paladin: {life: 5} });\n\n    let paladin = u('paladin');\n    _.range(0,5).forEach(() => {\n      paladin.update({life: paladin.get.life - 1});\n    });\n\n    assert.equal(u('paladin').get.life, 0);\n    _.range(0,5).forEach((time) => {\n      assert.equal(u('paladin').at(time).get.life, 5 - time);\n    });\n  });\n\n  it(\"should return similarly snapshotted nodes from child() and parent()\", () => {\n    let u = unison({ paladin: {life: 5}, goblin: {life: 12}, battle: 'raging' });\n\n    u('paladin').update({life: 666});\n    u('goblin').update({life: 0});\n    u('').update({battle: 'won'});\n\n    let paladinSnapshot = u('paladin').at(0);\n    assert.equal(paladinSnapshot.parent().get.battle, 'raging');\n    assert.equal(paladinSnapshot.parent().child('goblin').get.life, 12);\n  });\n\n  it(\"should throw if an invalid timestamp is requested\", () => {\n    let u = unison({ paladin: {life: 5} });\n    assert.throws(() => u('paladin').at(1));\n  });\n\n  it(\"should throw when used to perform updates\", () => {\n    let u = unison({ paladin: {life: 4, shield: {}} });\n\n    assert.throws(() => {\n      u('paladin').at(0).update({life: 7});\n    });\n    assert.throws(() => {\n      u('paladin').at(0).add('sword', {});\n    });\n    assert.throws(() => {\n      u('paladin').at(0).remove('shield');\n    });\n  });\n\n  it(\"should support only a limited number of steps in the past to keep memory usage down\", () => {\n    let u = unison({ paladin: {life: 15, shield: {}} }, {backlogSize: 10});\n\n    let paladin = u('paladin');\n    _.range(0,15).forEach(() => {\n      paladin.update({life: paladin.get.life - 1});\n    });\n\n    assert.equal(u('paladin').at(6).get.life, 9);\n    assert.throws(() => u('paladin').at(5));\n  });\n});"],"sourceRoot":"../../test"}