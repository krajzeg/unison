{"version":3,"sources":["mocks/server-comm.js"],"names":[],"mappings":"2wBAAqB,cAAc;AACtB,WADQ,cAAc,GACnB,uBADK,cAAc;AAE/B,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,QAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CACrB,aALkB,cAAc;;;AAO3B,oBAAC,QAAQ,EAAE;AACf,UAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CACnC;;;AAEK,oBAAC,QAAQ,EAAE;AACf,UAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CACnC;;;AAEK,oBAAC,QAAQ,EAAE,SAAS,EAAE;AAC1B,UAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACpC,UAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;AAC/B,UAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AACpC,UAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAC5C;;;AAEa,4BAAC,QAAQ,EAAE;AACvB,aAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAC3C;;;AAEiB,gCAAC,QAAQ,EAAE,OAAO,EAAE;AACpC,aAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;AAC3C,YAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA,EAAA,CAC/C,CAAC,CACH;;;;AAEgB,+BAAC,QAAQ,EAAE,OAAO,EAAE;AACnC,UAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACxC,UAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAC/C;;;AAEe,8BAAC,QAAQ,EAAE,SAAS,EAAE;AACpC,UAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAC/C;;;AAEO,sBAAC,QAAQ,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAE;AAClD,sBAAC,QAAQ,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAE;AACjD,uBAAC,QAAQ,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAE,YA3CzC,cAAc,2BAAd,cAAc","file":"mocks/server-comm.js","sourcesContent":["export default class ServerCommMock {\n  constructor() {\n    this.clients = [];\n    this.sentPerClient = {};\n    this.callbacks = {};\n  }\n\n  attach(clientId) {\n    this.callbacks.onAttach(clientId);\n  }\n\n  detach(clientId) {\n    this.callbacks.onDetach(clientId);\n  }\n\n  sendTo(clientId, msgString) {\n    let message = JSON.parse(msgString);\n    if (!this.sentPerClient[clientId])\n      this.sentPerClient[clientId] = [];\n    this.sentPerClient[clientId].push(message);\n  }\n\n  messagesSentTo(clientId) {\n    return this.sentPerClient[clientId] || [];\n  }\n\n  containsMessageFor(clientId, message) {\n    return this.sentPerClient[clientId].some((msg) =>\n      JSON.stringify(msg) == JSON.stringify(message)\n    );\n  }\n\n  pushClientMessage(clientId, message) {\n    let msgString = JSON.stringify(message);\n    this.callbacks.onReceive(clientId, msgString);\n  }\n\n  pushClientString(clientId, msgString) {\n    this.callbacks.onReceive(clientId, msgString);\n  }\n\n  onAttach(callback) { this.callbacks.onAttach = callback; }\n  onDetach(callback) { this.callbacks.onDetach = callback; }\n  onReceive(callback) { this.callbacks.onReceive = callback; }\n}\n"],"sourceRoot":"../../../test"}